###
 0000000  000   000  00000000  000      00000000
000       000   000  000       000      000
0000000   000000000  0000000   000      000000
     000  000   000  000       000      000
0000000   000   000  00000000  0000000  000
###

use ../../kxk ▪ pullAll ffs elem post slash keyinfo popup stopEvent $
use ../tools  ◆ File Git
use           ◆ Row Column

function Shelf extends Column

    @: browser ->

        super browser

        @items  = []
        @index  = -1
        @div.id = 'shelf'

        post.on 'gitStatus'     @onGitStatus
        post.on 'addToShelf'    @addPath
        post.on 'stashLoaded'   @onStashLoaded
        post.on 'file'          @onFile

    #  0000000    0000000  000000000  000  000   000   0000000   000000000  0000000     00000000    0000000   000   000
    # 000   000  000          000     000  000   000  000   000     000     000         000   000  000   000  000 0 000
    # 000000000  000          000     000   000 000   000000000     000     0000000     0000000    000   000  000000000
    # 000   000  000          000     000     000     000   000     000     000         000   000  000   000  000   000
    # 000   000   0000000     000     000      0      000   000     000     0000000     000   000   0000000   00     00

    activateRow: row ->

        $('.hover')?.classList.remove 'hover'

        item = row.item

        row.setActive emit:true

        if item.type == 'file'
            post.emit 'jumpToFile' item
        else
            post.emit 'filebrowser' 'loadItem' item

    #  0000000   000   000      00000000  000  000      00000000
    # 000   000  0000  000      000       000  000      000
    # 000   000  000 0 000      000000    000  000      0000000
    # 000   000  000  0000      000       000  000      000
    #  0000000   000   000      000       000  0000000  00000000

    onFile: file =>

        ⮐ if empty file

        if @navigatingRows
            delete @navigatingRows
            ⮐ 

        for index in 0...@items.length
            if @items[index].path == file
                @rows[index].setActive()
                ⮐ 

        matches = []
        for index,item of @items
            if file?.startsWith item.path
                matches.push [index, item]

        if valid matches
            matches.sort (a,b) -> b[1].path.length - a[1].path.length
            [index, item] = first matches
            @rows[index].setActive()

    # 000  000   000  000  000000000
    # 000  0000  000  000     000
    # 000  000 0 000  000     000
    # 000  000  0000  000     000
    # 000  000   000  000     000

    onStashLoaded: =>

        @loadShelfItems()

        setTimeout @loadGitStatus, 100

    loadShelfItems: ->

        items = window.prefs.get "shelf|items"

        @setItems items, save:false

    addPath: path opt =>

        if ffs.isDir(path).then (isDir) =>
            if isDir
                @addDir path, opt
            else
                @addFile path, opt

    # 000  000000000  00000000  00     00   0000000
    # 000     000     000       000   000  000
    # 000     000     0000000   000000000  0000000
    # 000     000     000       000 0 000       000
    # 000     000     00000000  000   000  0000000

    itemPaths: -> @rows.map (r) -> r.path()

    savePrefs: -> prefs.set "shelf|items" @items

    setItems: @items opt ->

        @clear()

        @items ?= []
        @addItems @items

        if opt?.save != false
            @savePrefs()
        @

    addItems: items opt ->

        ⮐ if empty items

        for item in items
            @rows.push new Row @, item

        @scroll.update()
        @

    addDir: dir opt ->

        item =
            name: slash.file slash.tilde dir
            type: 'dir'
            path: slash.path dir

        @addItem item, opt

    addFile: file opt ->

        item =
            name: slash.file file
            path: slash.path file
            type: 'file'
        item.textFile = true if File.isText file
        @addItem item, opt

    addFiles: files opt ○->

        for file in files
            if ○ ffs.isDir file
                @addDir file, opt
            else
                @addFile file, opt

    addItem: item opt ->

        pullAll @items, [item] # remove item if on shelf already

        if opt?.pos
            index = @rowIndexAtPos opt.pos
            @items.splice Math.min(index, @items.length), 0 item
        else
            @items.push item

        @setItems @items

    onDrop: event =>

        action = event.getModifierState('Shift') and 'copy' or 'move'
        source = event.dataTransfer.getData 'text/plain'

        item = @browser.pathItem source
        @addItem item, pos:kpos event

    isEmpty: -> empty @rows

    clear: ->

        @clearSearch()
        @div.scrollTop = 0
        @table.innerHTML = ''
        @rows = []
        @scroll.update()

    name: -> 'shelf'

    #  0000000   000  000000000
    # 000        000     000
    # 000  0000  000     000
    # 000   000  000     000
    #  0000000   000     000

    onGitStatus: status =>

        for row in @rows
            if row.path().startsWith status.gitDir
                $('.browserStatusIcon', row.div)?.remove()
                if row.path() in status.dirs
                    row.div.appendChild elem 'span' class:"git-dirs-icon browserStatusIcon"
                else if status.files[row.path()]
                    row.div.appendChild elem 'span' class:"git-#{status.files[row.path()]}-icon browserStatusIcon"
        @

    loadGitStatus: =>
        
        for row in @rows
            Git.status row.path()
        @
        
    # 00000000   0000000    0000000  000   000   0000000
    # 000       000   000  000       000   000  000
    # 000000    000   000  000       000   000  0000000
    # 000       000   000  000       000   000       000
    # 000        0000000    0000000   0000000   0000000

    onFocus: =>

        @div.classList.add 'focus'
        if @browser.shelfSize < 200
            @browser.setShelfSize 200

    # 00     00   0000000   000   000   0000000  00000000
    # 000   000  000   000  000   000  000       000
    # 000000000  000   000  000   000  0000000   0000000
    # 000 0 000  000   000  000   000       000  000
    # 000   000   0000000    0000000   0000000   00000000

    onMouseOver: event => @row(event.target)?.onMouseOver?()
    onMouseOut:  event => @row(event.target)?.onMouseOut?()
    onDblClick:  event => @navigateCols 'enter'

    # 000   000   0000000   000   000  000   0000000    0000000   000000000  00000000
    # 0000  000  000   000  000   000  000  000        000   000     000     000
    # 000 0 000  000000000   000 000   000  000  0000  000000000     000     0000000
    # 000  0000  000   000     000     000  000   000  000   000     000     000
    # 000   000  000   000      0      000   0000000   000   000     000     00000000

    navigateRows: key ->

        ⮐ error "no rows in column #{@index}?" if not @numRows()
        
        index = @activeRow()?.index() ? -1
        error "no index from activeRow? #{index}?" @activeRow() if not index? or Number.isNaN index

        index = switch key
            'up'        ➜ index-1
            'down'      ➜ index+1
            'home'      ➜ 0
            'end'       ➜ @items.length
            'page up'   ➜ index-@numVisible()
            'page down' ➜ clamp 0, @items.length, index+@numVisible()
                        ➜ index

        error "no index #{index}? #{@numVisible()}" if not index? or Number.isNaN index
        index = clamp 0, @numRows()-1, index

        error "no row at index #{index}/#{@numRows()-1}?", @numRows() if not @rows[index]?.activate?

        navigate = (action) =>
            @navigatingRows = true
            post.emit 'menuAction' action

        if      key == 'up'   and index > @items.length     ➜ navigate 'Navigate Forward'
        else if key == 'down' and index > @items.length + 1 ➜ navigate 'Navigate Backward'
        else
            row = @rows[index]
            row.setActive emit:false
            if row.item.type == 'file'
                post.emit 'jumpToFile' row.path
            else
                post.emit 'filebrowser' 'loadItem' row.path, focus:false

    openFileInNewWindow: ->

        if item = @activeRow()?.item
            if item.type == 'file' and item.textFile
                window.openFiles [item.path], newWindow: true
        @

    removeObject: =>

        row = @activeRow() ? @selectedRow()

        if row
            nextOrPrev = row.next() ? row.prev()
            row.div.remove()
            @items.splice row.index(), 1
            @rows.splice row.index(), 1
            nextOrPrev?.activate()
            @savePrefs()
        @

    # 00000000    0000000   00000000   000   000  00000000
    # 000   000  000   000  000   000  000   000  000   000
    # 00000000   000   000  00000000   000   000  00000000
    # 000        000   000  000        000   000  000
    # 000         0000000   000         0000000   000

    showContextMenu: absPos =>

        if not absPos?
            absPos = pos @view.getBoundingClientRect().left, @view.getBoundingClientRect().top

        opt = items: [
            text:   'Toggle Extensions'
            combo:  'ctrl+e'
            cb:     @toggleExtensions
        ,
            text:   'Remove'
            combo:  'backspace'
            cb:     @removeObject
        ]

        opt.x = absPos.x
        opt.y = absPos.y
        popup.menu opt

    # 000   000  00000000  000   000
    # 000  000   000        000 000
    # 0000000    0000000     00000
    # 000  000   000          000
    # 000   000  00000000     000

    onKey: event =>

        { mod, key, combo, char } = keyinfo.forEvent event

        switch combo
            'command+enter'
            'ctrl+enter'    ➜ ⮐ @openFileInNewWindow()
            'enter'         ➜ ⮐ stopEvent event, @navigateCols key
            'backspace'
            'delete'        ➜ ⮐ stopEvent event, @clearSearch().removeObject()
            'command+k'
            'ctrl+k'        ➜ ⮐ stopEvent event if @browser.cleanUp()
            'ctrl+e'        ➜ @toggleExtensions()
            'up' 'down'
            'page up'
            'page down'
            'home' 'end'    ➜ ⮐ stopEvent event, @navigateRows key
            'right'
            'alt+right'
            'enter'         ➜ ⮐ stopEvent event, @focusBrowser()
            'tab'           ➜ if @search.length ➜ @doSearch ''; ⮐ stopEvent event
            'esc'
                if @dragDiv
                    @dragDiv.drag.dragStop()
                    @dragDiv.remove()
                    delete @dragDiv
                if @search.length ➜ @clearSearch()
                ⮐ stopEvent event

        if mod in ['shift' ''] and char ➜ @doSearch char

        if @dragDiv
            @updateDragIndicator event

    onKeyUp: event =>

        if @dragDiv
            @updateDragIndicator event

export Shelf
