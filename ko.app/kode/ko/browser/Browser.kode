###
0000000    00000000    0000000   000   000   0000000  00000000  00000000
000   000  000   000  000   000  000 0 000  000       000       000   000
0000000    0000000    000   000  000000000  0000000   0000000   0000000
000   000  000   000  000   000  000   000       000  000       000   000
0000000    000   000   0000000   00     00  0000000   00000000  000   000
###

use ../../kxk ▪ kpos elem slash events setStyle post
use ../win/flex/Flex
use ./Column

function Browser extends events

    @: @view ->

        @columns = []

        post.on 'stashLoaded' @onStashLoaded
        
    onStashLoaded: =>
        
        hideExtensions = window.stash.get 'browser|hideExtensions' true
        setStyle '.browserRow .ext' 'display' hideExtensions and 'none' or 'initial'

    # 000  000   000  000  000000000       0000000   0000000   000      000   000  00     00  000   000   0000000
    # 000  0000  000  000     000         000       000   000  000      000   000  000   000  0000  000  000
    # 000  000 0 000  000     000         000       000   000  000      000   000  000000000  000 0 000  0000000
    # 000  000  0000  000     000         000       000   000  000      000   000  000 0 000  000  0000       000
    # 000  000   000  000     000          0000000   0000000   0000000   0000000   000   000  000   000  0000000

    initColumns: ->

        ⮐ if @cols? and @cols.parentNode == @view

        @view.innerHTML = ''

        if @cols?
            @view.appendChild @cols
            ⮐

        @cols = elem class:'browser' id:'columns'
        @view.appendChild @cols

        @columns = []

        @flex = new Flex
            view:       @cols
            onPaneSize: @updateColumnScrolls

    columnAtPos: pos ->

        for col in @columns
            if elem.containsPos col.div, pos
                ⮐ col
        null

    columnAtX: x ->

        for col in @columns
            cpos = kpos col.div.getBoundingClientRect().left, col.div.getBoundingClientRect().top
            pos = kpos x, cpos.y
            if elem.containsPos col.div, pos
                ⮐ col
        null

    rowAtPos: pos ->

        if col = @columnAtPos pos
            ⮐ col.rowAtPos pos
        null

    # 000   000   0000000   000   000  000   0000000    0000000   000000000  00000000
    # 0000  000  000   000  000   000  000  000        000   000     000     000
    # 000 0 000  000000000   000 000   000  000  0000  000000000     000     0000000
    # 000  0000  000   000     000     000  000   000  000   000     000     000
    # 000   000  000   000      0      000   0000000   000   000     000     00000000

    navigate: key ->

        @select.clear()

        if key == 'up'
            if @activeColumnIndex() > 0
                if col = @activeColumn()
                    if row = col.activeRow()
                        @loadItem row.item
                    else
                        @loadItem @dirItem col.path()
            else
                if not slash.isRoot @columns[0].path()
                    @loadItem @fileItem slash.dir @columns[0].path()
        else
            index = @focusColumn()?.index ? 0
            nuidx = index + switch key
                'left''up' ➜ -1
                'right'    ➜  1
                           ➜  0

            nuidx = clamp 0, @numCols()-1, nuidx
            ⮐ if nuidx == index
            if @columns[nuidx].numRows()
                @columns[nuidx].focus()?.activeRow()?.activate()

        @updateColumnScrolls()
        @

    # 00000000   0000000    0000000  000   000   0000000
    # 000       000   000  000       000   000  000
    # 000000    000   000  000       000   000  0000000
    # 000       000   000  000       000   000       000
    # 000        0000000    0000000   0000000   0000000

    focus: opt => 
        @lastDirOrSrcColumn()?.focus opt
        @

    focusColumn: ->
        for c in @columns
            ⮐ c if c.hasFocus()

    # 00000000  00     00  00000000   000000000  000   000
    # 000       000   000  000   000     000      000 000
    # 0000000   000000000  00000000      000       00000
    # 000       000 0 000  000           000        000
    # 00000000  000   000  000           000        000

    emptyColumn: colIndex ->

        if colIndex?
            for c in colIndex...@numCols()
                @clearColumn c

        for col in @columns
            ⮐ col if col.isEmpty()

        @addColumn()

    #  0000000   00000000  000000000
    # 000        000          000
    # 000  0000  0000000      000
    # 000   000  000          000
    #  0000000   00000000     000

    activeColumn: -> @column @activeColumnIndex()
    activeColumnIndex: ->

        for col in @columns
            if col.hasFocus() ➜ ⮐ col.index
        0

    lastUsedColumn: ->

        used = null
        for col in @columns
            if not col.isEmpty()
                used = col
            else break
        used

    hasEmptyColumns: -> @columns[-1]?.isEmpty()

    height: -> @flex?.height()
    numCols: -> @columns.length
    column: i -> @columns[i] if 0 <= i < @numCols()

    #  0000000   0000000    0000000     0000000   0000000   000
    # 000   000  000   000  000   000  000       000   000  000
    # 000000000  000   000  000   000  000       000   000  000
    # 000   000  000   000  000   000  000       000   000  000
    # 000   000  0000000    0000000     0000000   0000000   0000000

    addColumn: ->

        ⮐ if not @flex

        col = new Column @
        @columns.push col
        @flex.addPane div:col.div, size:50
        col

    # 00000000    0000000   00000000
    # 000   000  000   000  000   000
    # 00000000   000   000  00000000
    # 000        000   000  000
    # 000         0000000   000

    clearColumn: index -> if index < @columns.length then @columns[index].clear()

    shiftColumn: ->

        ⮐ if not @flex
        ⮐ if not @columns.length
        @clearColumn 0
        @flex.shiftPane()
        @columns.shift()

        for i in 0...@columns.length
            @columns[i].setIndex i

    popColumn: opt -> 

        ⮐ if not @flex
        @clearColumn @columns.length-1
        @flex.popPane opt
        @columns.pop()

    popEmptyColumns: opt ->
        
        if col = @lastDirColumn()?.index
            log 'Browser.popEmptyColumns' col, @lastDirColumn()
            @clearColumnsFrom col, pop:true

    shiftColumnsTo: col ->

        for i in [0...col]
            @shiftColumn()

        @updateColumnScrolls()

    #  0000000  000      00000000   0000000   00000000
    # 000       000      000       000   000  000   000
    # 000       000      0000000   000000000  0000000
    # 000       000      000       000   000  000   000
    #  0000000  0000000  00000000  000   000  000   000

    clear: -> @clearColumnsFrom 0 pop:true

    clearColumnsFrom: (c=0, opt=pop:false) ->

        return error "clearColumnsFrom #{c}?" if not c? or c < 0

        num = @numCols()
        if opt.pop
            if opt.clear?
                while c <= opt.clear
                    @clearColumn c
                    c++
            while c < num
                @popColumn()
                c++
        else
            while c < num
                @clearColumn c
                c++

    #  0000000  000      00000000   0000000   000   000
    # 000       000      000       000   000  0000  000
    # 000       000      0000000   000000000  000 0 000
    # 000       000      000       000   000  000  0000
    #  0000000  0000000  00000000  000   000  000   000

    isMessy: -> not @flex.relaxed or @hasEmptyColumns()

    cleanUp: ->
        
        ⮐ false if not @flex?
        ⮐ false if not @isMessy()
        
        log 'Browser.cleanUp'
        @popEmptyColumns()
        @flex.relax()
        true

    resized: -> @updateColumnScrolls()

    updateColumnScrolls: =>

        for c in @columns
            c.scroll.update()

    reset: -> delete @cols; @initColumns()
    stop:  -> @cols.remove(); @cols = null
    start: -> @initColumns()

    refresh: => reset()

    # 000  00     00   0000000    0000000   00000000
    # 000  000   000  000   000  000        000
    # 000  000000000  000000000  000  0000  0000000
    # 000  000 0 000  000   000  000   000  000
    # 000  000   000  000   000   0000000   00000000

    loadImage: row file ->

        ⮐ if not row.isActive()

        col = @emptyColumn opt?.col
        @clearColumnsFrom col.index
        cnt = elem class:'browserImageContainer' child:
            elem 'img' class:'browserImage' src:slash.fileUrl file
        col.table.appendChild cnt

export Browser
