###
00000000    0000000   000   000
000   000  000   000  000 0 000
0000000    000   000  000000000
000   000  000   000  000   000
000   000   0000000   00     00
###

use ../../kxk ▪ kstr elem post slash keyinfo stopEvent $

use ../editor/Syntax
use ../tools/File

function Row

    @: @column @item ->

        @browser = @column.browser

        text = @item.text ? @item.file ? @item.name ? slash.file @item.path
        if empty(text) or empty text.trim()
            html = '<span> </span>'
        else
            html = Syntax.spanForTextAndSyntax text, 'browser'
        @div = elem class:'browserRow' html: html
        @div.classList.add @item.type ? 'file'
        @column.table.appendChild @div

        if @item.type in ['file' 'dir'] or @item.icon
            @setIcon()

    next:        -> @index() < @column.numRows()-1 and @column.rows[@index()+1] or null
    prev:        -> @index() > 0 and @column.rows[@index()-1] or null
    index:       -> @column.rows.indexOf @
    onMouseOut:  => @div?.classList.remove 'hover'
    onMouseOver: => @div?.classList.add 'hover'

    path: ->
        if @item.path? and @item.path is str
            ⮐ @item.path
        if @item.obj?.path? and @item.obj.path is str
            ⮐ @item.obj.path

    setIcon: ->

        if slash.ext(@item.path) == 'kode'

            icon = elem 'span' class:'kodeIcon'
            icon.innerHTML =
                """
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="16" height="16"><path d="M5.75 7.5a.75.75 0 01.75.75v1.5a.75.75 0 01-1.5 0v-1.5a.75.75 0 01.75-.75zm5.25.75a.75.75 0 00-1.5 0v1.5a.75.75 0 001.5 0v-1.5z"></path><path fill-rule="evenodd" d="M6.25 0a.75.75 0 000 1.5H7.5v2H3.75A2.25 2.25 0 001.5 5.75V8H.75a.75.75 0 000 1.5h.75v2.75a2.25 2.25 0 002.25 2.25h8.5a2.25 2.25 0 002.25-2.25V9.5h.75a.75.75 0 000-1.5h-.75V5.75a2.25 2.25 0 00-2.25-2.25H9V.75A.75.75 0 008.25 0h-2zM3 5.75A.75.75 0 013.75 5h8.5a.75.75 0 01.75.75v6.5a.75.75 0 01-.75.75h-8.5a.75.75 0 01-.75-.75v-6.5z"></path></svg>
                """

            @div.insertBefore icon, @div.firstChild
            ⮐ 

        if @item.icon
            className = @item.icon
        else
            if @item.type == 'dir'
                className = 'folder-icon'
            else
                className = File.iconClassName @item.path

        if slash.name(@item.path).startsWith('.')
            className += ' dotfile'

        icon = elem('span' class:className + ' browserFileIcon')

        @div.firstChild?.insertBefore icon, @div.firstChild.firstChild

    #  0000000    0000000  000000000  000  000   000   0000000   000000000  00000000
    # 000   000  000          000     000  000   000  000   000     000     000
    # 000000000  000          000     000   000 000   000000000     000     0000000
    # 000   000  000          000     000     000     000   000     000     000
    # 000   000   0000000     000     000      0      000   000     000     00000000

    activate: (event, emit=true) =>

        if @column.index < 0 # shelf handles row activation
            @column.activateRow @
            ⮐ 

        $('.hover')?.classList.remove 'hover'
        
        while $ '.selected' @column.div
            $('.selected' @column.div).classList.remove 'selected'

        if @item.file == '..'
            if emit
                post.emit 'filebrowser' 'loadItem' @item
                ⮐ 
            else
                @setActive()
                @browser.clearColumnsFrom @column.index+1, pop:true
                ⮐ 

        @setActive emit:emit

        switch @item.type

            'dir' 'file'

                post.emit 'filebrowser' 'activateItem' @item, @column.index

                col = @column.index

                @browser.select.row @, false

            ➜ # if @item.type == 'func'
                
                @browser.clearColumnsFrom @column.index+1, pop:true

                post.emit 'jumpToFilePos' @item if emit
        @

    isActive: -> @div.classList.contains 'active'

    setActive: opt={} ->

        if @column.activeRow() != @
            @column.activeRow()?.clearActive()

        @div.classList.add 'active'

        if opt?.scroll != false
            @column.scroll.toIndex @index()

        if opt?.emit
            @browser.emit 'itemActivated' @item
        @

    clearActive: ->
        @div.classList.remove 'active'
        @

    #  0000000  00000000  000      00000000   0000000  000000000  00000000  0000000
    # 000       000       000      000       000          000     000       000   000
    # 0000000   0000000   000      0000000   000          000     0000000   000   000
    #      000  000       000      000       000          000     000       000   000
    # 0000000   00000000  0000000  00000000   0000000     000     00000000  0000000

    isSelected: -> @div.classList.contains 'selected'

    setSelected: ->
        @div.classList.add 'selected'
        @

    clearSelected: ->
        @div.classList.remove 'selected'
        @

    # 000   000   0000000   00     00  00000000
    # 0000  000  000   000  000   000  000
    # 000 0 000  000000000  000000000  0000000
    # 000  0000  000   000  000 0 000  000
    # 000   000  000   000  000   000  00000000

    editName: =>

        ⮐ if @input?
        
        @input = elem 'input' class:'rowNameInput'
        @input.value = slash.file @item.path

        @div.appendChild @input
        @input.addEventListener 'change'   @onNameChange
        @input.addEventListener 'keydown'  @onNameKeyDown
        @input.addEventListener 'focusout' @onNameFocusOut
        @input.focus()

        @input.setSelectionRange 0, slash.name(@item.path).length

    onNameKeyDown: event =>

        {mod, key, combo} = keyinfo.forEvent event

        file = slash.file @item.path

        switch combo
            'esc'
                if @input.value != file
                    @input.value = file
                    event.preventDefault()
                    event.stopImmediatePropagation()
                @onNameFocusOut()
            'enter'
                if @input.value != file
                    @onNameChange()
                else
                    @removeInput()
                stopEvent event
        event.stopPropagation()

    removeInput: ->

        ⮐ if not @input?
        
        @input.removeEventListener 'focusout' @onNameFocusOut
        @input.removeEventListener 'change'   @onNameChange
        @input.removeEventListener 'keydown'  @onNameKeyDown
        @input.remove()
        delete @input
        @input = null
        if not document.activeElement? or document.activeElement == document.body
            @column.focus activate:false

    onNameFocusOut: event => @removeInput()

    #  0000000  000   000   0000000   000   000   0000000   00000000
    # 000       000   000  000   000  0000  000  000        000
    # 000       000000000  000000000  000 0 000  000  0000  0000000
    # 000       000   000  000   000  000  0000  000   000  000
    #  0000000  000   000  000   000  000   000   0000000   00000000

    onNameChange: event =>

        targetFile = slash.path slash.dir(@item.path), @input.value.trim()

        @removeInput()

        @rename targetFile

    # 00000000   00000000  000   000   0000000   00     00  00000000
    # 000   000  000       0000  000  000   000  000   000  000
    # 0000000    0000000   000 0 000  000000000  000000000  0000000
    # 000   000  000       000  0000  000   000  000 0 000  000
    # 000   000  00000000  000   000  000   000  000   000  00000000

    rename: targetFile =>

        ⮐ if slash.samePath @item.path, targetFile

        File.rename @item.path, targetFile

export Row
