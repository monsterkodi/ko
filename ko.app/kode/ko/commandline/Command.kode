###
 0000000   0000000   00     00  00     00   0000000   000   000  0000000
000       000   000  000   000  000   000  000   000  0000  000  000   000
000       000   000  000000000  000000000  000000000  000 0 000  000   000
000       000   000  000 0 000  000 0 000  000   000  000  0000  000   000
 0000000   0000000   000   000  000   000  000   000  000   000  0000000
###

use ../../kxk ▪ pull reversed krzl elem

use ./CommandList

function Command

    @: @commandline ->

        @syntaxName = 'ko'
        @maxHistory = 20
        @history = []
        @krzl = new krzl

    #  0000000  000000000   0000000   000000000  00000000
    # 000          000     000   000     000     000
    # 0000000      000     000000000     000     0000000
    #      000     000     000   000     000     000
    # 0000000      000     000   000     000     00000000

    state: ->

        text:  @getText()
        name:  @name

    restoreState: state =>

        if state?.name
            @name = state.name
        @loadState()

    #  0000000  000000000   0000000   00000000   000000000
    # 000          000     000   000  000   000     000
    # 0000000      000     000000000  0000000       000
    #      000     000     000   000  000   000     000
    # 0000000      000     000   000  000   000     000

    start: name ->

        @setName name
        @loadState()

        text = @getText()
        text = @last() if not text?.length

        text:   text
        select: true

    # 00000000  000   000  00000000   0000000  000   000  000000000  00000000
    # 000        000 000   000       000       000   000     000     000
    # 0000000     00000    0000000   000       000   000     000     0000000
    # 000        000 000   000       000       000   000     000     000
    # 00000000  000   000  00000000   0000000   0000000      000     00000000

    execute: command ->
        
        # log 'Command.execute' command, @commandList?

        if empty command
            return error 'no command!'

        if @commandList?
            if 0 <= @selected < @commandList.numLines()
                # log 'Command.execute commandList selected' @selected
                command = @commandList.line @selected
            @hideList()

        command = command.trim()
        # log 'Command.execute setCurrent ?' command
        @setCurrent command
        # log 'Command.execute setCurrent ▸' command
        command

    #  0000000  000   000   0000000   000   000   0000000   00000000  0000000
    # 000       000   000  000   000  0000  000  000        000       000   000
    # 000       000000000  000000000  000 0 000  000  0000  0000000   000   000
    # 000       000   000  000   000  000  0000  000   000  000       000   000
    #  0000000  000   000  000   000  000   000   0000000   00000000  0000000

    changed: command ->

        return if not @commandList?

        command = command.trim()
        items = @listItems()

        if items.length
            if command.length
                @krzl.values  = items
                @krzl.extract = (o) ->
                    if o?
                        return o if o is str
                        return o.text if o.text is str
                    ''
                items = @krzl.filter command

            @showItems @weightedItems items, currentText: command
            @select 0
            @positionList()

    weight: item opt ->

        w = 0
        w += item.text.startsWith(opt.currentText) and 65535 * (opt.currentText.length/item.text.length) or 0
        w

    weightedItems: (items, opt) -> items.sort (a,b) => @weight(b, opt) - @weight(a, opt)

    #  0000000   0000000   000   000   0000000  00000000  000
    # 000       000   000  0000  000  000       000       000
    # 000       000000000  000 0 000  000       0000000   000
    # 000       000   000  000  0000  000       000       000
    #  0000000  000   000  000   000   0000000  00000000  0000000

    cancel: ->

        @hideList()
        
        text: ''
        focus: @receiver
        show: 'editor'

    clear: ->

        if window.terminal.numLines() > 0
            window.terminal.clear()
            {}
        else
            text: ''

    # 000      000   0000000  000000000
    # 000      000  000          000
    # 000      000  0000000      000
    # 000      000       000     000
    # 0000000  000  0000000      000
    
    initAndShowList: ->
        
        @showList()
        @showItems @listItems()
        @select 0
        @positionList()

    showList: ->

        if not @commandList?
            listView = elem class: "commandlist #{@prefsID}"
            window.split.elem.appendChild listView
            
            @commandList = new CommandList @, '.commandlist' syntaxName:@syntaxName

    listItems: ->

        reversed @history

    showItems: items ->

        return if not @commandList? and not items.length
        return @hideList() if not items.length
        @showList() if not @commandList?
        @commandList.addItems items
        @positionList()

    listClick: index =>

        @selected = index
        @execute @commandList.line index

    onBot: bot => @positionList()

    positionList: ->

        return if not @commandList?
        flex = window.split.flex
        flex.update()
        listTop = flex.posOfPane 2
        listHeight = @commandList.view.getBoundingClientRect().height
        spaceBelow = flex.size() - listTop
        if spaceBelow < listHeight
            if flex.sizeOfPane(0) > spaceBelow
                listTop = flex.posOfHandle(0) - listHeight
                if listTop < 0
                    @commandList.view.style.height = "#{listHeight+listTop}px"
                    listTop = 0
            else
                @commandList.view.style.height = "#{spaceBelow}px"
        @commandList.view.style.top = "#{listTop}px"

    #  0000000  00000000  000      00000000   0000000  000000000
    # 000       000       000      000       000          000
    # 0000000   0000000   000      0000000   000          000
    #      000  000       000      000       000          000
    # 0000000   00000000  0000000  00000000   0000000     000

    select: i ->
        return if not @commandList?
        @selected = clamp -1, @commandList.numLines()-1, i
        if @selected >= 0
            @commandList.selectSingleRange @commandList.rangeForLineAtIndex(@selected), before:true
        else
            @commandList.singleCursorAtPos [0,0]
        @commandList.scroll.cursorIntoView()

    selectListItem: dir ->

        switch dir
            when 'up'   then @setAndSelectText @prev()
            when 'down' then @setAndSelectText @next()

    # 00000000   00000000   00000000  000   000
    # 000   000  000   000  000       000   000
    # 00000000   0000000    0000000    000 000
    # 000        000   000  000          000
    # 000        000   000  00000000      0

    prev: ->
        if @commandList?
            @select clamp -1, @commandList.numLines()-1, @selected-1
            if @selected < 0
                @hideList()
            else
                return @commandList.line(@selected)
        else
            if @selected < 0
                @selected = @history.length-1
            else if @selected > 0
                @selected -= 1
            return @history[@selected]
        ''

    # 000   000  00000000  000   000  000000000
    # 0000  000  000        000 000      000
    # 000 0 000  0000000     00000       000
    # 000  0000  000        000 000      000
    # 000   000  00000000  000   000     000

    next: ->
        if not @commandList? and @listItems().length
            @showItems @listItems()
            @select -1
        if @commandList?
            @select clamp 0, @commandList.numLines()-1, @selected+1
            return @commandList.line(@selected)
        else if @history.length
            @selected = clamp 0, @history.length-1, @selected+1
            return new @history[@selected]
        else
            @selected = -1
            return ''

    # 000   000  000  0000000    00000000
    # 000   000  000  000   000  000
    # 000000000  000  000   000  0000000
    # 000   000  000  000   000  000
    # 000   000  000  0000000    00000000

    onBlur: =>

        if not @skipBlur
            @hideList()
        else
            @skipBlur = null

    hideList: =>

        if not @
            error 'hideList dafuk?'
            return

        @selected = -1
        
        if @commandList?
            # log "Command.hideList " @name #@commandList
            @commandList.del()
            @commandList.view?.remove()
            @commandList = null

    # 000   000  000   0000000  000000000   0000000   00000000   000   000
    # 000   000  000  000          000     000   000  000   000   000 000
    # 000000000  000  0000000      000     000   000  0000000      00000
    # 000   000  000       000     000     000   000  000   000     000
    # 000   000  000  0000000      000      0000000   000   000     000

    historyKey: -> 'history'

    clearHistory: ->

        @history = []
        @selected = -1
        @setState @historyKey(), @history

    setHistory: @history ->

        @setState @historyKey(), @history

    setCurrent: command ->

        @loadState() if not @history?
        if not @history is arr
            error "Command.setCurrent -- #{@historyKey()} : history not an array?" typeof @history
            @history = []
        pull @history, command
        @history.push command if command.trim().length
        while @history.length > @maxHistory
            @history.shift()
        @selected = @history.length-1
        @setState @historyKey(), @history

    current: -> @history[@selected] ? ''

    last: ->
        if @commandList?
            @selected = @commandList.numLines()-1
            @commandList.line(@selected)
        else
            @selected = @history.length-1
            return @history[@selected] if @selected >= 0
        ''

    # 000000000  00000000  000   000  000000000
    #    000     000        000 000      000
    #    000     0000000     00000       000
    #    000     000        000 000      000
    #    000     00000000  000   000     000

    setText: t ->

        # log "Command[#{@name}].setText" t
        @currentText = t
        @commandline.setText t

    setAndSelectText: t ->
        @currentText = t
        @commandline.setAndSelectText t

    getText: -> @commandline.line(0)

    setName: n ->
        @name = n
        @commandline.setName n

    complete: ->
        return if not @commandList?
        if @commandList.line(@selected) != @getText() and @commandList.line(@selected).startsWith @getText()
            @setText @commandList.line(@selected)
            true

    # 00000000   0000000    0000000  000   000   0000000
    # 000       000   000  000       000   000  000
    # 000000    000   000  000       000   000  0000000
    # 000       000   000  000       000   000       000
    # 000        0000000    0000000   0000000   0000000

    grabFocus: -> @commandline.focus()

    # 00000000   00000000   0000000  00000000  000  000   000  00000000  00000000
    # 000   000  000       000       000       000  000   000  000       000   000
    # 0000000    0000000   000       0000000   000   000 000   0000000   0000000
    # 000   000  000       000       000       000     000     000       000   000
    # 000   000  00000000   0000000  00000000  000      0      00000000  000   000

    setReceiver: receiver ->

        return if receiver == 'body'
        @receiver = receiver ? 'editor'

    receivingEditor: -> window.editorWithName @receiver

    #  0000000  000000000   0000000   000000000  00000000
    # 000          000     000   000     000     000
    # 0000000      000     000000000     000     0000000
    #      000     000     000   000     000     000
    # 0000000      000     000   000     000     00000000

    setPrefsID: id ->

        @prefsID = id
        @loadState()

    loadState: ->

        @history  = @getState @historyKey(), []
        @history ?= []
        @selected = @history?.length-1 ? 0

    setState: key value ->

        return if not @prefsID
        if @prefsID
            window.stash.set "command|#{@prefsID}|#{key}", value

    getState: key value ->

        return value if not @prefsID
        window.stash.get "command|#{@prefsID}|#{key}", value

    delState: key ->

        return if not @prefsID
        window.stash.del "command|#{@prefsID}|#{key}"

    isActive: -> @commandline.command == @

    # 000   000  00000000  000   000
    # 000  000   000        000 000
    # 0000000    0000000     00000
    # 000  000   000          000
    # 000   000  00000000     000

    globalModKeyComboEvent: mod key combo event -> 'unhandled'

    handleModKeyComboEvent: mod key combo event ->

        switch combo
            'page up' 'page down'
                if @commandList?
                    return @select clamp 0, @commandList.numLines()-1, @selected+(@commandList.numFullLines()-1)*(combo=='page up' and -1 or 1)
        'unhandled'

    onTabCompletion: combo ->

        if
            @commandline.isCursorAtEndOfLine()
                @complete()
                true
            combo == 'tab'
                true
            ➜
                false

export Command
