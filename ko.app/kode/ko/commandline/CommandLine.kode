###
 0000000   0000000   00     00  00     00   0000000   000   000  0000000    000      000  000   000  00000000
000       000   000  000   000  000   000  000   000  0000  000  000   000  000      000  0000  000  000
000       000   000  000000000  000000000  000000000  000 0 000  000   000  000      000  000 0 000  0000000
000       000   000  000 0 000  000 0 000  000   000  000  0000  000   000  000      000  000  0000  000
 0000000   0000000   000   000  000   000  000   000  000   000  0000000    0000000  000  000   000  00000000
###

use ../../kxk ▪ ffs elem post slash stopEvent $
use ../editor ◆ TextEditor

function CommandLine extends TextEditor

    @commandModules: {}
    
    ###
    000  000   000  000  000000000  
    000  0000  000  000     000     
    000  000 0 000  000     000     
    000  000  0000  000     000     
    000  000   000  000     000     
    ###
    
    @init: ○->

        files =○ ffs.list slash.path ◆dir, '../commands'
        
        for file in files
            
            continue if slash.ext(file.path) not in ['js' 'mjs']
            try
                commandModule =○ import(file.path)
            catch err
                error "can't import command from file '#{file.path}': #{err}"
                throw err
            try
                CommandLine.commandModules[commandModule.default.name.toLowerCase()] = commandModule.default
            catch err
                error "can't create command '#{commandClass}': #{err}"
                throw err
                
    #  0000000   0000000   000   000   0000000  000000000  00000000   000   000   0000000  000000000   0000000   00000000   
    # 000       000   000  0000  000  000          000     000   000  000   000  000          000     000   000  000   000  
    # 000       000   000  000 0 000  0000000      000     0000000    000   000  000          000     000   000  0000000    
    # 000       000   000  000  0000       000     000     000   000  000   000  000          000     000   000  000   000  
    #  0000000   0000000   000   000  0000000      000     000   000   0000000    0000000     000      0000000   000   000  
    
    @: viewElem ->

        super viewElem, features: [], fontSize: 24, syntaxName:'commandline'

        @mainCommands = ['goto' 'open' 'macro' 'browse' 'search' 'find' ]
        @hideCommands = ['selecto' 'shelf']

        @size.lineHeight = 30
        @scroll.setLineHeight @size.lineHeight

        @button =$ 'commandline-button'
        @button.classList.add 'empty'
        @button.addEventListener 'mousedown' @onCmmdClick

        @commands = {}
        for name,commandModule of CommandLine.commandModules
            @commands[name] = new commandModule @
            @commands[name].prefsID = name
        @command = null

        post.on 'split'       @onSplit
        post.on 'stashLoaded' @onStashLoaded
        post.on 'stash'       @stash
        post.on 'searchText'  @onSearchText

        @view.onblur = =>
            @button.classList.remove 'active'
            @list?.remove()
            @list = null
            @command?.onBlur()

        @view.onfocus = =>
            @button.className = "commandline-button active #{@command?.prefsID}"
            
    #  0000000  000000000   0000000    0000000  000   000
    # 000          000     000   000  000       000   000
    # 0000000      000     000000000  0000000   000000000
    #      000     000     000   000       000  000   000
    # 0000000      000     000   000  0000000   000   000

    stash: =>

        if @command?
            window.stash.set 'commandline' @command.state()

    onStashLoaded: =>

        state = window.stash.get 'commandline'

        @setText state?.text ? ""

        name = state?.name ? 'open'

        if @command = @commandForName name
            activeID = document.activeElement.id
            if activeID.startsWith 'column' then activeID = 'editor'
            @command.setReceiver activeID != 'commandline-editor' and activeID or null
            @setName name
            @button.className = "commandline-button active #{@command.prefsID}"
            @commands[name]?.restoreState? state

    #  0000000  00000000   0000000   00000000    0000000  000   000  000000000  00000000  000   000  000000000  
    # 000       000       000   000  000   000  000       000   000     000     000        000 000      000     
    # 0000000   0000000   000000000  0000000    000       000000000     000     0000000     00000       000     
    #      000  000       000   000  000   000  000       000   000     000     000        000 000      000     
    # 0000000   00000000  000   000  000   000   0000000  000   000     000     00000000  000   000     000     
    
    onSearchText: text =>
        
        if window.split.commandlineVisible()
            if @command?.prefsID not in ['search' 'find']
                @startCommand 'find' 
        @commands.find.currentText = text
        @commands.search.currentText = text
        @setAndSelectText text
            
    setName: name ->

        @button.innerHTML = name
        @layers.style.width = @view.style.width

    setLines: l ->

        @scroll.reset()
        super l

    setAndSelectText: t ->

        @setLines [t ? '']
        @selectAll()
        @selectSingleRange @rangeForLineAtIndex 0

    setText: t ->

        @setLines [t ? '']
        @singleCursorAtPos? [@line(0).length, 0]

    #  0000000  000   000   0000000   000   000   0000000   00000000  0000000
    # 000       000   000  000   000  0000  000  000        000       000   000
    # 000       000000000  000000000  000 0 000  000  0000  0000000   000   000
    # 000       000   000  000   000  000  0000  000   000  000       000   000
    #  0000000  000   000  000   000  000   000   0000000   00000000  0000000

    changed: changeInfo ->

        @hideList()
        super changeInfo
        if changeInfo.changes.length
            @button.className = "commandline-button active #{@command?.prefsID}"
            @command?.changed @line(0)

    onSplit: s =>

        @command?.onBot? s[1]
        @positionList()

    #  0000000  000000000   0000000   00000000   000000000
    # 000          000     000   000  000   000     000
    # 0000000      000     000000000  0000000       000
    #      000     000     000   000  000   000     000
    # 0000000      000     000   000  000   000     000

    startCommand: name ->
        
        r = @command?.cancel name

        if r?.status == 'ok'
            @results r
            return

        window.split.showCommandline()

        if @command = @commandForName name

            activeID = document.activeElement.id
            if activeID.startsWith 'column' then activeID = 'editor'
            if activeID and activeID != 'commandline-editor'
                @command.setReceiver activeID

            @lastFocus = window.lastFocus
            @view.focus()
            @setName name
            # log 'startCommand' name
            @results @command.start name # <-- command start

            if name in ['search' 'find']
                window.textEditor.highlightTextOfSelectionOrWordAtCursor()
                @view.focus()
            @button.className = "commandline-button active #{@command.prefsID}"
        else
            error "no command #{name}"

    commandForName: name ->

        for n,c of @commands
            if n == name or name in c.names
                return c

    # 00000000  000   000  00000000   0000000  000   000  000000000  00000000
    # 000        000 000   000       000       000   000     000     000
    # 0000000     00000    0000000   000       000   000     000     0000000
    # 000        000 000   000       000       000   000     000     000
    # 00000000  000   000  00000000   0000000   0000000      000     00000000

    execute: -> @results @command?.execute @line 0

    # 00000000   00000000   0000000  000   000  000      000000000   0000000
    # 000   000  000       000       000   000  000         000     000
    # 0000000    0000000   0000000   000   000  000         000     0000000
    # 000   000  000            000  000   000  000         000          000
    # 000   000  00000000  0000000    0000000   0000000     000     0000000

    results: r ->

        @setName r.name if r?.name?
        @setText r.text if r?.text?
        if r?.select then @selectAll() else @selectNone()
        window.split.show   r.show   if r?.show?
        window.split.focus  r.focus  if r?.focus?
        window.split.do     r.do     if r?.do?
        @

    cancel: -> @results @command?.cancel()
    clear:  ->
        if @text() == ''
            @results @command?.clear()
        else
            super()

    # 000      000   0000000  000000000
    # 000      000  000          000
    # 000      000  0000000      000
    # 000      000       000     000
    # 0000000  000  0000000      000

    onCmmdClick: event =>

        if not @list?
            @list = elem class: 'list commands'
            @positionList()
            window.split.elem.appendChild @list
        @command?.hideList()
        @listCommands()
        @focus()
        @positionList()
        stopEvent event

    listCommands: ->

        @list.innerHTML = ""
        @list.style.display = 'unset'
        
        for name in @mainCommands
            cmmd = @commands[name]
            continue if empty cmmd

            for ci in 0...cmmd.names.length
                cname = cmmd.names[ci]
                continue if cname in @hideCommands
                div = elem class: 'list-item'
                div.innerHTML = "<span class=\"ko command #{cmmd.prefsID}\" style=\"position:absolute; left: #{ci > 0 and 80 or 12}px\">#{cname}</span>"
                start = (name) => (event) =>
                    @hideList()
                    @startCommand name
                    stopEvent event
                div.addEventListener 'mousedown' start cname
                @list.appendChild div

    hideList: ->

        @list?.remove()
        @list = null

    # 00000000    0000000    0000000  000  000000000  000   0000000   000   000
    # 000   000  000   000  000       000     000     000  000   000  0000  000
    # 00000000   000   000  0000000   000     000     000  000   000  000 0 000
    # 000        000   000       000  000     000     000  000   000  000  0000
    # 000         0000000   0000000   000     000     000   0000000   000   000

    positionList: ->

        return if not @list?
        listHeight = @list.getBoundingClientRect().height
        flex = window.split.flex
        listTop = flex.posOfPane 2
        spaceBelow = flex.size() - listTop
        spaceAbove = flex.sizeOfPane 0
        if spaceBelow < listHeight and spaceAbove > spaceBelow
            listTop = spaceAbove - listHeight
        @list.style.top = "#{listTop}px" if @list

    resized: ->

        @list?.resized?()
        @command?.commandList?.resized()
        super()

    focusTerminal: ->

        if window.terminal.numLines() == 0
            window.terminal.singleCursorAtPos [0,0]
        window.split.do "focus terminal"

    # 00     00  00000000  000   000  000   000        0000000    0000000  000000000  000   0000000   000   000  
    # 000   000  000       0000  000  000   000       000   000  000          000     000  000   000  0000  000  
    # 000000000  0000000   000 0 000  000   000       000000000  000          000     000  000   000  000 0 000  
    # 000 0 000  000       000  0000  000   000       000   000  000          000     000  000   000  000  0000  
    # 000   000  00000000  000   000   0000000        000   000   0000000     000     000   0000000   000   000  
    
    handleMenuAction: name trail ->
        
        # log 'handleMenuAction' name, trail
        
        if trail?.split('Command▸').length > 1
            rest = trail.split('Command▸')[1]
            cmdName = rest.split('▸')[0]
            # log rest, cmdName, name
            if name != 'Case Sensitive' ➜ cmdName = cmdName.toLowerCase()
        else if trail?.endsWith 'Command'
            cmdName = name.toLowerCase()
            
        if cmd = @commandForName cmdName
            # log 'Commandline.handleMenuAction' cmdName, name, trail
            @startCommand cmdName
            if cmdName in ['goto''open''macro']
                # log 'command should openMenu'
                true
            else if cmdName in ['search''Search']
                st = trim @text()
                if st.length > 1
                    @command.execute @text()
                    window.split.do 'show terminal'
            else
                # log 'command.execute' name
                @command.execute name
            return
            
        'unhandled'

    globalModKeyComboEvent: mod key combo event ->

        if combo == 'esc'
            if document.activeElement == @view
                stopEvent event
                return @cancel()

        if @command?
            return @command.globalModKeyComboEvent mod, key, combo, event

        'unhandled'

    handleModKeyComboCharEvent: mod key combo char event ->

        # log 'handleModKeyComboEvent' mod, key, combo, char
        if @command?
            return if 'unhandled' != @command.handleModKeyComboEvent mod, key, combo, event

        split = window.split
        switch combo
            'enter'                ➜ ⮐ @execute()
            'command+enter'        ➜ ⮐ @execute() + window.split.do "focus #{@command?.focus}"
            'command+shift+enter'  ➜ ⮐ @focusTerminal()
            'up'                   ➜ ⮐ @command?.selectListItem 'up'
            'down'                 ➜ ⮐ @command?.selectListItem 'down'
            'esc'                  ➜ ⮐ @cancel()
            'command+k'            ➜ ⮐ @clear()
            'shift+tab'            ➜ ⮐
            'home' 'command+up'    ➜ ⮐ split.do 'maximize editor'
            'end' 'command+down'   ➜ ⮐ split.do 'minimize editor'
            'alt+up'               ➜ ⮐ split.do 'enlarge editor'
            'ctrl+up'              ➜ ⮐ split.do 'enlarge editor by 20'
            'alt+down'             ➜ ⮐ split.do 'reduce editor'
            'ctrl+down'            ➜ ⮐ split.do 'reduce editor by 20'
            'right' 'tab'          ➜ ⮐ if @command?.onTabCompletion combo

        return super mod, key, combo, char, event

export CommandLine
