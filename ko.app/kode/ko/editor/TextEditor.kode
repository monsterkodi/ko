###
000000000  00000000  000   000  000000000        00000000  0000000    000  000000000   0000000   00000000
   000     000        000 000      000           000       000   000  000     000     000   000  000   000
   000     0000000     00000       000           0000000   000   000  000     000     000   000  0000000
   000     000        000 000      000           000       000   000  000     000     000   000  000   000
   000     00000000  000   000     000           00000000  0000000    000     000      0000000   000   000
###

use ../../kxk ▪ $ profile keyinfo prefs post drag elem stopEvent

use ◆ Do Meta AutoComplete Scrollbar Brackets Numbers Diffbar Minimap Strings Render EditorScroll FuncList FileList Editor

function TextEditor extends Editor

    @: viewElem config ->

        name = viewElem
        name = name.slice 1 if name[0] == '.'

        super name, config

        @view =$ viewElem
        
        @layers      = elem class:'layers'
        @layerScroll = elem class:'layerScroll' child:@layers, parent:@view

        layer = []
        layer.push 'selections'
        layer.push 'highlights'
        layer.push 'meta'    if 'Meta'    in @config.features
        layer.push 'lines'
        layer.push 'cursors'
        layer.push 'numbers' if 'Numbers' in @config.features
        @initLayers layer

        @size = {}
        @size.xOffsetAtCharacterInLine = @xOffsetAtCharacterInLine
        @size.xAtCharacterInLine       = @xAtCharacterInLine
        @size.widthOfRangeInLine       = @widthOfRangeInLine
        @size.widthOfText              = @widthOfText
        @elem = @layerDict.lines

        @spanCache = [] # cache for rendered line spans
        @lineDivs  = {} # maps line numbers to displayed divs

        @config.lineHeight ?= 1.2

        @setFontSize prefs.get("#{@name}FontSize" @config.fontSize ? 19)
        @scroll = new EditorScroll @
        @scroll.on 'shiftLines' @shiftLines
        @scroll.on 'showLines'  @showLines

        @view.addEventListener 'blur'     @onBlur
        @view.addEventListener 'focus'    @onFocus
        @view.addEventListener 'keydown'  @onKeyDown

        @initDrag()        

        @installFeatures()
        
        @transform = new Editor.actionModules.transform.Transform @

        @blink = false
        @startBlink()
        
        post.on 'schemeChanged' @onSchemeChanged
        
    # 00000000  00000000   0000000   000000000  000   000  00000000   00000000   0000000  
    # 000       000       000   000     000     000   000  000   000  000       000       
    # 000000    0000000   000000000     000     000   000  0000000    0000000   0000000   
    # 000       000       000   000     000     000   000  000   000  000            000  
    # 000       00000000  000   000     000      0000000   000   000  00000000  0000000   
    
    installFeatures: ->
        
        # log 'TextEditor.installFeatures' @config
        
        for feature in @config.features
            if feature == 'CursorLine'
                @cursorLine = elem 'div' class:'cursor-line'
            else
                featureName = feature.toLowerCase()
                featureClss = eval feature
                @[featureName] = new featureClss @
                # log 'feature' featureName, featureClss, @[featureName]
        
    # 0000000    00000000  000
    # 000   000  000       000
    # 000   000  0000000   000
    # 000   000  000       000
    # 0000000    00000000  0000000

    del: ->

        post.removeListener 'schemeChanged' @onSchemeChanged
        
        @scrollbar?.del()

        @view.removeEventListener 'keydown' @onKeyDown
        @view.removeEventListener 'blur'    @onBlur
        @view.removeEventListener 'focus'   @onFocus
        @view.innerHTML = ''

        super()

    # 00000000   0000000    0000000  000   000   0000000
    # 000       000   000  000       000   000  000
    # 000000    000   000  000       000   000  0000000
    # 000       000   000  000       000   000       000
    # 000        0000000    0000000   0000000   0000000

    onFocus: =>

        @startBlink()
        @emit 'focus' @
        post.emit 'editorFocus' @

    onBlur: =>

        @stopBlink()
        @emit 'blur' @

    onSchemeChanged: =>

        @syntax?.schemeChanged()
        if @minimap
            updateMinimap = => @minimap?.drawLines()
            setTimeout updateMinimap, 10

    # 000       0000000   000   000  00000000  00000000    0000000
    # 000      000   000   000 000   000       000   000  000
    # 000      000000000    00000    0000000   0000000    0000000
    # 000      000   000     000     000       000   000       000
    # 0000000  000   000     000     00000000  000   000  0000000

    initLayers: layerClasses ->

        @layerDict = {}
        for cls in layerClasses
            @layerDict[cls] = @addLayer cls

    addLayer: cls ->

        div = elem class: cls
        @layers.appendChild div
        div

    updateLayers: ->

        @renderHighlights()
        @renderSelection()
        @renderCursors()

    # 000      000  000   000  00000000   0000000  
    # 000      000  0000  000  000       000       
    # 000      000  000 0 000  0000000   0000000   
    # 000      000  000  0000  000            000  
    # 0000000  000  000   000  00000000  0000000   
    
    setLines: lines ->

        @clearLines()

        lines ?= []

        @spanCache = []
        @lineDivs  = {}

        super lines

        @scroll.reset()

        viewHeight = @viewHeight()
        
        @scroll.start viewHeight, @numLines()

        @layerScroll.scrollLeft = 0
        @layersWidth  = @layerScroll.offsetWidth
        @layersHeight = @layerScroll.offsetHeight

        @updateLayers()

    #  0000000   00000000   00000000   00000000  000   000  0000000    
    # 000   000  000   000  000   000  000       0000  000  000   000  
    # 000000000  00000000   00000000   0000000   000 0 000  000   000  
    # 000   000  000        000        000       000  0000  000   000  
    # 000   000  000        000        00000000  000   000  0000000    
    
    appendText: text ->

        if not text?
            log "#{@name}.appendText - no text?"
            return

        appended = []
        ls = text?.split /\n/

        for l in ls
            @do.append l
            appended.push @numLines()-1

        if @scroll.viewHeight != @viewHeight()
            @scroll.setViewHeight @viewHeight()

        showLines = (@scroll.bot < @scroll.top) or (@scroll.bot < @scroll.viewLines)

        @scroll.setNumLines @numLines(), showLines:showLines

        for li in appended
            @emit 'lineAppended',
                lineIndex:  li
                text: @line(li)

        @emit 'linesAppended' ls
        @emit 'numLines' @numLines()

    # 00000000   0000000   000   000  000000000
    # 000       000   000  0000  000     000
    # 000000    000   000  000 0 000     000
    # 000       000   000  000  0000     000
    # 000        0000000   000   000     000

    setFontSize: fontSize =>
        
        @layers.style.fontSize = "#{fontSize}px"
        @size.numbersWidth = 'Numbers' in @config.features and 50 or 0
        @size.fontSize     = fontSize
        @size.lineHeight   = Math.floor fontSize * @config.lineHeight
        @size.charWidth    = fontSize * 0.6
        @size.offsetX      = Math.floor @size.charWidth/2 + @size.numbersWidth

        if @size.centerText
            @centerText false 0
            @centerText true 0

        if @scroll
            oldTop = @scroll.top
            @scroll.to 0
            @spanCache = []
            @scroll.bot = @scroll.top-1 # force scroll to re-show all lines
            @scroll.setLineHeight @size.lineHeight
            @scroll.to oldTop * @size.lineHeight
        
        @emit 'fontSizeChanged' # numbers

    #  0000000  000   000   0000000   000   000   0000000   00000000  0000000
    # 000       000   000  000   000  0000  000  000        000       000   000
    # 000       000000000  000000000  000 0 000  000  0000  0000000   000   000
    # 000       000   000  000   000  000  0000  000   000  000       000   000
    #  0000000  000   000  000   000  000   000   0000000   00000000  0000000

    changed: changeInfo ->
        
        # log 'TextEditor.changed' changeInfo
        
        # profile.start 'changed'
        
        @syntax.changed changeInfo

        for change in changeInfo.changes
            [di,li,ch] = [change.doIndex, change.newIndex, change.change]
            switch ch
                
                'changed'
                    @updateLine li di
                    @emit 'lineChanged' li
                    
                'deleted'
                    @spanCache = @spanCache.slice 0 di
                    @emit 'lineDeleted' di
                    
                'inserted'
                    @spanCache = @spanCache.slice 0 di
                    @emit 'lineInserted' li, di
                            
        if changeInfo.inserts or changeInfo.deletes
            @layersWidth = @layerScroll.offsetWidth
            if @numLines() != @scroll.numLines
                @scroll.setNumLines @numLines()
            else
                num = @scroll.bot - @scroll.top + 1
                @showLines @scroll.top @scroll.bot num
            @updateLinePositions()

        if changeInfo.changes.length
            @clearHighlights()

        if changeInfo.cursors
            @renderCursors()
            @scroll.cursorIntoView()
            # ●▸ emitcrs
            @emit 'cursor'
            # ●▪ emitcrs
            @suspendBlink()

        if changeInfo.selects
            @renderSelection()
            @emit 'selection'

        # ●▸ emit
        @emit 'changed' changeInfo
        # ●▪ emit
        
        # profile.end 'changed'
        null

    # 000   000  00000000   0000000     0000000   000000000  00000000
    # 000   000  000   000  000   000  000   000     000     000
    # 000   000  00000000   000   000  000000000     000     0000000
    # 000   000  000        000   000  000   000     000     000
    #  0000000   000        0000000    000   000     000     00000000

    updateLine: li oi ->

        oi = li if not oi?

        if li < @scroll.top or li > @scroll.bot
            error "dangling line div? #{li}", @lineDivs[li] if @lineDivs[li]?
            delete @spanCache[li]
            return
            
        return error "updateLine - out of bounds? li #{li} oi #{oi}" if not @lineDivs[oi]

        @spanCache[li] = Render.lineSpan @syntax.getDiss(li), @size

        div = @lineDivs[oi]
        div.replaceChild @spanCache[li], div.firstChild
                
    #  0000000  000   000   0000000   000   000     000      000  000   000  00000000   0000000
    # 000       000   000  000   000  000 0 000     000      000  0000  000  000       000
    # 0000000   000000000  000   000  000000000     000      000  000 0 000  0000000   0000000
    #      000  000   000  000   000  000   000     000      000  000  0000  000            000
    # 0000000   000   000   0000000   00     00     0000000  000  000   000  00000000  0000000

    showLines: top bot num =>

        @lineDivs = {}
        @elem.innerHTML = ''

        for li in top..bot
            @appendLine li

        @updateLinePositions()
        @updateLayers()
        @emit 'linesShown' top bot num
    
    appendLine: (li) ->

        @lineDivs[li] = elem class: 'line'
        @lineDivs[li].appendChild @cachedSpan(li)
        @elem.appendChild @lineDivs[li]

    #  0000000  000   000  000  00000000  000000000     000      000  000   000  00000000   0000000
    # 000       000   000  000  000          000        000      000  0000  000  000       000
    # 0000000   000000000  000  000000       000        000      000  000 0 000  0000000   0000000
    #      000  000   000  000  000          000        000      000  000  0000  000            000
    # 0000000   000   000  000  000          000        0000000  000  000   000  00000000  0000000

    shiftLines: top bot num =>

        oldTop = top - num
        oldBot = bot - num

        divInto = (li,lo) =>

            if not @lineDivs[lo]
                log "#{@name}.shiftLines.divInto - no div? #{top} #{bot} #{num} old #{oldTop} #{oldBot} lo #{lo} li #{li}"
                return
                
            if not elem.isElement @lineDivs[lo]
                log "#{@name}.shiftLines.divInto - no element? #{top} #{bot} #{num} old #{oldTop} #{oldBot} lo #{lo} li #{li}"
                return

            @lineDivs[li] = @lineDivs[lo]
            delete @lineDivs[lo]
            @lineDivs[li].replaceChild @cachedSpan(li), @lineDivs[li].firstChild
            
            if @showInvisibles
                tx = @line(li).length * @size.charWidth + 1
                span = elem 'span' class: "invisible newline", html: '&#9687'
                span.style.transform = "translate(#{tx}px, -1.5px)"
                @lineDivs[li].appendChild span

        if num > 0
            while oldBot < bot
                oldBot += 1
                divInto oldBot oldTop
                oldTop += 1
        else
            while oldTop > top
                oldTop -= 1
                divInto oldTop oldBot
                oldBot -= 1

        @emit 'linesShifted' top bot num

        @updateLinePositions()
        @updateLayers()

    # 000   000  00000000   0000000     0000000   000000000  00000000
    # 000   000  000   000  000   000  000   000     000     000
    # 000   000  00000000   000   000  000000000     000     0000000
    # 000   000  000        000   000  000   000     000     000
    #  0000000   000        0000000    000   000     000     00000000

    updateLinePositions: animate=0 ->
        
        for li,div of @lineDivs
            if div?.style?
                y = @size.lineHeight * (li - @scroll.top)
                div.style.transform = "translate3d(#{@size.offsetX}px,#{y}px, 0)"
                div.style.transition = "all #{animate/1000}s" if animate
                div.style.zIndex = li

        if animate
            resetTrans = =>
                for c in @elem.children
                    c.style.transition = 'initial'
            setTimeout resetTrans, animate

    updateLines: ->

        for li in [@scroll.top..@scroll.bot]
            @updateLine li

    clearHighlights: ->

        if @numHighlights()
            $('.highlights' @layers).innerHTML = ''
            super()

    # 00000000   00000000  000   000  0000000    00000000  00000000
    # 000   000  000       0000  000  000   000  000       000   000
    # 0000000    0000000   000 0 000  000   000  0000000   0000000
    # 000   000  000       000  0000  000   000  000       000   000
    # 000   000  00000000  000   000  0000000    00000000  000   000

    cachedSpan: li ->

        if not @spanCache[li]

            @spanCache[li] = Render.lineSpan @syntax.getDiss(li), @size

        @spanCache[li]

    renderCursors: ->

        cs = []
        for c in @cursors()
            if c[1] >= @scroll.top and c[1] <= @scroll.bot
                cs.push [c[0], c[1] - @scroll.top]
                
        mc = @mainCursor()

        if @numCursors() == 1

            if cs.length == 1

                return if mc[1] < 0

                if mc[1] > @numLines()-1
                    return error "#{@name}.renderCursors mainCursor DAFUK?", @numLines(), str(@mainCursor())

                ri = mc[1]-@scroll.top
                cursorLine = @do.line(mc[1]) # not @line(mc[1]) ???
                return error 'no main cursor line?' @do if not cursorLine?
                if mc[0] > cursorLine.length
                    cs[0][2] = 'virtual'
                    cs.push [cursorLine.length, ri, 'main off']
                else
                    cs[0][2] = 'main off'

        else if @numCursors() > 1

            vc = [] # virtual cursors
            for c in cs
                if isSamePos @mainCursor(), [c[0], c[1] + @scroll.top]
                    c[2] = 'main'
                line = @line(@scroll.top+c[1])
                if c[0] > line.length
                    vc.push [line.length, c[1], 'virtual']
            cs = cs.concat vc

        html = Render.cursors cs, @size, @scroll.top
        @layerDict.cursors.innerHTML = html
        
        ty = (mc[1] - @scroll.top) * @size.lineHeight
        
        if @cursorLine
            @cursorLine.style = "z-index:0;transform:translate3d(0,#{ty}px,0); height:#{@size.lineHeight}px;"
            @layers.insertBefore @cursorLine, @layers.firstChild

    renderSelection: ->

        h = ""
        s = @selectionsInLineIndexRangeRelativeToLineIndex [@scroll.top, @scroll.bot], @scroll.top
        if s
            h += Render.selection s, @size, @scroll.top
        @layerDict.selections.innerHTML = h

    renderHighlights: ->

        h = ""
        s = @highlightsInLineIndexRangeRelativeToLineIndex [@scroll.top, @scroll.bot], @scroll.top
        if s
            h += Render.selection s, @size, @scroll.top, 'highlight'
        @layerDict.highlights.innerHTML = h

    # 0000000    000      000  000   000  000   000
    # 000   000  000      000  0000  000  000  000
    # 0000000    000      000  000 0 000  0000000
    # 000   000  000      000  000  0000  000  000
    # 0000000    0000000  000  000   000  000   000

    cursorDiv: -> $ '.cursor.main' @layerDict['cursors']

    suspendBlink: ->

        # return if not @blinkTimer
        @stopBlink()
        @cursorDiv()?.classList.toggle 'blink' false
        clearTimeout @suspendTimer
        @suspendTimer = setTimeout @releaseBlink, 4000

    releaseBlink: =>

        clearTimeout @suspendTimer
        delete @suspendTimer
        @startBlink()

    toggleBlink: ->

        blink = not prefs.get 'blink' false
        prefs.set 'blink' blink
        if blink
            @startBlink()
        else
            @stopBlink()

    doBlink: =>

        @blink = not @blink
        
        @cursorDiv()?.classList.toggle 'blink' @blink
        @minimap?.drawMainCursor @blink
        
        clearTimeout @blinkTimer
        @blinkTimer = setTimeout @doBlink, @blink and 100 or 2000

    startBlink: -> 
    
        if not @suspendTimer and prefs.get 'blink' true
            @doBlink() 

    stopBlink: ->

        @cursorDiv()?.classList.toggle 'blink' false
        
        clearTimeout @blinkTimer
        delete @blinkTimer

    # 00000000   00000000   0000000  000  0000000  00000000
    # 000   000  000       000       000     000   000
    # 0000000    0000000   0000000   000    000    0000000
    # 000   000  000            000  000   000     000
    # 000   000  00000000  0000000   000  0000000  00000000

    resized: ->

        vh = @view.clientHeight

        return if vh == @scroll.viewHeight

        @numbers.elem.style.height = "#{@scroll.exposeNum * @scroll.lineHeight}px" if @numbers
        @layersWidth = @layerScroll.offsetWidth

        @scroll.setViewHeight vh

        @emit 'viewHeight' vh

    # 00000000    0000000    0000000
    # 000   000  000   000  000
    # 00000000   000   000  0000000
    # 000        000   000       000
    # 000         0000000   0000000

    widthOfText: text =>
            
        w = text.length * @size.charWidth
        
        for char,index in text
            if char == '⮐'
                w += @size.charWidth
        w

    widthOfRangeInLine: firstCharacter lastCharacter line =>
        
        if ln = @line line
            
            ⮐ @widthOfText ln[firstCharacter...lastCharacter]
        
        @size.charWidth  * (lastCharacter-firstCharacter)
    
    xOffsetAtCharacterInLine: character line =>
        
        if ln = @line line
            
            if character > ln.length
                beyond = (character - ln.length) * @size.charWidth
            else
                beyond = 0
            
            ⮐ @size.offsetX + beyond + @widthOfText(ln[0...character])
        
        character * @size.charWidth + @size.offsetX

    xAtCharacterInLine: character line =>
        
        log 'xAtCharacterInLine' character line
        
        character * @size.charWidth
        
    posAtXY: x y ->

        sl = @layerScroll.scrollLeft
        st = @scroll.offsetTop
        br = @view.getBoundingClientRect()
        
        lx = clamp 0 @layers.offsetWidth,  x - br.left - @size.offsetX + @size.charWidth/3
        ly = clamp 0 @layers.offsetHeight, y - br.top
        px = parseInt(Math.floor(Math.max(0 sl + lx)/@size.charWidth))
        py = parseInt(Math.floor(Math.max(0 st + ly)/@size.lineHeight)) + @scroll.top
        p  = [px, Math.min(@numLines()-1 py)]
        p

    posForEvent: event -> @posAtXY event.clientX, event.clientY

    lineElemAtXY: x y ->

        p = @posAtXY x,y
        @lineDivs[p[1]]

    lineSpanAtXY: x y ->
        
        if lineElem = @lineElemAtXY x,y
            lr = lineElem.getBoundingClientRect()
            for e in lineElem.firstChild.children
                br = e.getBoundingClientRect()
                if br.left <= x <= br.left+br.width
                    offset = x-br.left
                    return span:e, offsetLeft:offset, offsetChar:parseInt(offset/@size.charWidth)
        null

    numFullLines: -> @scroll.fullLines
    
    viewHeight: -> 
        
        if @scroll?.viewHeight >= 0 then return @scroll.viewHeight
        @view?.clientHeight

    clearLines: =>

        @elem.innerHTML = ''
        @emit 'clearLines'

    clear: => 
        @setLines []

    focus: -> @view.focus()

    #   0000000    00000000    0000000    0000000
    #   000   000  000   000  000   000  000
    #   000   000  0000000    000000000  000  0000
    #   000   000  000   000  000   000  000   000
    #   0000000    000   000  000   000   0000000

    initDrag: ->

        @drag = new drag
            target:  @layerScroll

            onStart: (drag event) =>
                
                @view.focus()
                    
                eventPos = @posForEvent event
                
                if event.button == 2
                    return 'skip'
                else if event.button == 1
                    if not @jumpToFileAtPos eventPos
                        @jumpToWordAtPos eventPos
                    stopEvent event
                    return 'skip'
                
                if @clickCount
                    if isSamePos eventPos, @clickPos
                        @startClickTimer()
                        @clickCount += 1
                        if @clickCount == 2
                            range = @rangeForWordAtPos eventPos
                            if event.metaKey or @stickySelection
                                @addRangeToSelection range
                            else
                                @highlightWordAndAddToSelection()
                        if @clickCount == 3
                            @clearHighlights()
                            r = @rangeForLineAtIndex @clickPos[1]
                            if event.metaKey
                                @addRangeToSelection r
                            else
                                @selectSingleRange r
                        return
                    else
                        @onClickTimeout()

                @clickCount = 1
                @clickPos = eventPos
                @startClickTimer()

                p = @posForEvent event
                @clickAtPos p, event

            onMove: (drag event) =>
                p = @posForEvent event
                if event.metaKey
                    @addCursorAtPos [@mainCursor()[0], p[1]]
                else
                    @singleCursorAtPos p, extend:true

            onStop: =>
                @selectNone() if @numSelections() and empty @textOfSelection()
                    
    startClickTimer: =>

        clearTimeout @clickTimer
        @clickTimer = setTimeout @onClickTimeout, @stickySelection and 300 or 1000

    onClickTimeout: =>

        clearTimeout @clickTimer
        @clickCount  = 0
        @clickTimer  = null
        @clickPos    = null

    funcInfoAtLineIndex: (li) ->

        # files = post.get 'indexer' 'files' @currentFile
        # fileInfo = files[@currentFile]
        # for func in fileInfo.funcs
            # if func.line <= li <= func.last
                # return func.class + '.' + func.name + ' '
        ''

    #  0000000  000      000   0000000  000   000
    # 000       000      000  000       000  000
    # 000       000      000  000       0000000
    # 000       000      000  000       000  000
    #  0000000  0000000  000   0000000  000   000

    clickAtPos: p event ->

        if event.altKey
            @toggleCursorAtPos p
        else if event.metaKey or event.ctrlKey
            @jumpToWordAtPos p
        else
            @singleCursorAtPos p, extend:event.shiftKey

    # 000   000  00000000  000   000
    # 000  000   000        000 000
    # 0000000    0000000     00000
    # 000  000   000          000
    # 000   000  00000000     000

    handleModKeyComboCharEvent: mod key combo char event ->
        
        if @autocomplete?
            return if 'unhandled' != @autocomplete.handleModKeyComboEvent mod key combo event

        switch combo
            'esc'
                @setSalterMode false
                @clearHighlights()
                @clearCursors()
                @endStickySelection()
                @selectNone()
                return
            'command+enter' 'ctrl+enter' 'f12' 
                if @name == 'editor' then return @jumpToWord()

        for action in Editor.actions
            
            combos = action.combos ? [action.combo]
                
            continue if empty combos
                
            for actionCombo in combos
                if combo == actionCombo
                    if action.key? and @[action.key] is func
                        @[action.key](key, combo:combo mod:mod event:event)
                        return

        if char and mod in ['shift' '']
            
            return @insertCharacter char

        'unhandled'

    onKeyDown: event =>

        { mod, key, combo, char } = keyinfo.forEvent event
        
        ⮐ if not combo
        
        result = @handleModKeyComboCharEvent mod key combo char event

        if 'unhandled' != result
            stopEvent event

    log: ->
        
        ⮐ if @name != 'editor'
        console.log.apply null, [].splice.call(arguments 0)

export TextEditor
