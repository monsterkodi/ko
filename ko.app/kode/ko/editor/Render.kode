###
00000000   00000000  000   000  0000000    00000000  00000000
000   000  000       0000  000  000   000  000       000   000
0000000    0000000   000 0 000  000   000  0000000   0000000
000   000  000       000  0000  000   000  000       000   000
000   000  00000000  000   000  0000000    00000000  000   000
###

use ../../kxk ▪ elem kstr

class Render

    # 000      000  000   000  00000000
    # 000      000  0000  000  000
    # 000      000  000 0 000  0000000
    # 000      000  000  0000  000
    # 0000000  000  000   000  00000000

    @line: diss opt={charWidth:0 wrapSpan:false spanClass:null} ->
        
        l = ""
        if diss?.length
            for di in diss.length-1..0
                d = diss[di]
                tx = d.start * opt.charWidth ? 0
                transform = tx ? "transform:translatex(#{tx}px);" : ''
                spanClass = d.clss ? opt.spanClass
                clss = spanClass and " class=\"#{spanClass}\"" or ''
                clrzd = "<span style=\"#{transform}#{d.styl ? ''}\"#{clss}>#{d.match}</span>" # use kstr.encode on d.match?
                l = clrzd + l
        l = "<span class='#{opt.wrapSpan}'>#{l}</span>" if opt.wrapSpan
        l

    @lineSpan: diss size ->

        div = elem class:'linespans'
        
        div.style['font-family'] = diss.font if diss.font # this is evil 8}
        
        if diss.length > 4000
            log 'line too long!'
            span = elem 'span'
            span.className = 'line_to_long'
            span.textContent = '*** line too long! ***'
            div.appendChild span
            return div
            
        cx = 0
        ds = 0
        
        for d in diss ? []
            
            cx += (d.start-ds) * size.charWidth
            cf = cx.toFixed 1
                
            span = elem 'span'
            span.style.transform = "translatex(#{cf}px)"
            span.className = d.clss if d.clss?
            span.textContent = d.match.replace /\x1b/g, '▪'
            
            ds  = d.start + span.textContent.length
            
            cx += size.widthOfText span.textContent 
            
            if d.styl?
                for st in d.styl.split ';'
                    ss = st.split ':'
                    span.style[ss[0]] = ss[1]
                    
            div.appendChild span
        div

    #  0000000  000   000  00000000    0000000   0000000   00000000    0000000
    # 000       000   000  000   000  000       000   000  000   000  000
    # 000       000   000  0000000    0000000   000   000  0000000    0000000
    # 000       000   000  000   000       000  000   000  000   000       000
    #  0000000   0000000   000   000  0000000    0000000   000   000  0000000

    @cursors: cs size top -> # cs: [ [charIndex, lineIndex] ... ]  (lineIndex relative to top)

        i = 0
        h = ""
        lh = size.lineHeight
        for c in cs
            tx  = size.xOffsetAtCharacterInLine c[0], c[1]+top
            ty  = c[1] * lh
            cls = ""
            cls = c[2] if c.length > 2
            zi  = cls != 'virtual' and c[1]+1000 or 0
            h += "<span class=\"cursor #{cls}\" style=\"z-index:#{zi};transform:translate3d(#{tx}px,#{ty}px,0); height:#{lh}px\"></span>"
            i += 1
        h

    #  0000000  00000000  000      00000000   0000000  000000000  000   0000000   000   000
    # 000       000       000      000       000          000     000  000   000  0000  000
    # 0000000   0000000   000      0000000   000          000     000  000   000  000 0 000
    #      000  000       000      000       000          000     000  000   000  000  0000
    # 0000000   00000000  0000000  00000000   0000000     000     000   0000000   000   000

    @selection: ss size top clss='selection' => # ss: [ [lineIndex, [startIndex, endIndex]], ... ]  (lineIndex relative to top)

        h = ""
        p = null
        n = null
        for si in 0...ss.length
            s = ss[si]
            n = (si < ss.length-1) and (ss[si+1][0] == s[0]+1) and ss[si+1] or null # next line selection
            b = p?[0] == s[0]-1 and p or null # selection in line before
            h += @selectionSpan b, s, n, size, top, s[2]?.clss ? s[2] ? clss
            p = s
        h

    @selectionSpan: prev sel next size top clss ->

        # 0000000     0000000   00000000   0000000    00000000  00000000
        # 000   000  000   000  000   000  000   000  000       000   000
        # 0000000    000   000  0000000    000   000  0000000   0000000
        # 000   000  000   000  000   000  000   000  000       000   000
        # 0000000     0000000   000   000  0000000    00000000  000   000

        border = ""
        if not prev
            border += " tl tr"
        else
            if sel[1][0] < prev[1][0] or sel[1][0] > prev[1][1]
                border += " tl"
            if sel[1][1] > prev[1][1] or sel[1][1] < prev[1][0]
                border += " tr"

        if not next
            border += " bl br"
        else
            if sel[1][1] > next[1][1] or sel[1][1] < next[1][0]
                border += " br"
            if sel[1][0] < next[1][0] or sel[1][0] > next[1][1]
                border += " bl"

        if sel[1][0] == 0 and not size.centerText
            border += " start" # wider offset at start of line

        sw = size.widthOfRangeInLine sel[1][0], sel[1][1], sel[0] + top
        tx = size.xOffsetAtCharacterInLine sel[1][0], sel[0] + top
        ty = size.lineHeight * sel[0]
        lh = size.lineHeight

        if clss.startsWith 'stringmatch'
            lh /= 2 if clss.endsWith 'single'
            lh /= 2 if clss.endsWith 'double'
            if clss.endsWith 'bold'
                ty += lh/4
                lh /= 2

        empty = sel[1][0] == sel[1][1] and "empty" or ""

        "<span class=\"#{clss}#{border} #{empty}\" style=\"transform: translate(#{tx}px,#{ty}px); width: #{sw}px; height: #{lh}px\"></span>"

export Render
