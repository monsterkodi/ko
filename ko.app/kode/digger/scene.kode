###
 0000000   0000000  00000000  000   000  00000000    
000       000       000       0000  000  000         
0000000   000       0000000   000 0 000  0000000     
     000  000       000       000  0000  000         
0000000    0000000  00000000  000   000  00000000    
###

use ../kxk â–ª deg2rad post
use ./gyroid
use ./lib/gridhelper
use ./lib/geom
use ./lib/material

import * as three from 'three'
import { EffectComposer }       from 'three/addons/postprocessing/EffectComposer.js'
import { RenderPass }           from 'three/addons/postprocessing/RenderPass.js'
import { UnrealBloomPass }      from 'three/addons/postprocessing/UnrealBloomPass.js'
import { OutputPass }           from 'three/addons/postprocessing/OutputPass.js'
import Stats                    from 'three/addons/libs/stats.module.js'

function Scene

    @: @view ->
        
        @doPostProcess = false
        
        @scene     = new three.Scene()
        @clock     = new three.Clock()
        @raycaster = new three.Raycaster()
        @mouse     = new three.Vector2 1 1
        @unitX     = new three.Vector3 1 0 0
        @unitY     = new three.Vector3 0 1 0
        @unitZ     = new three.Vector3 0 0 1
        @vec       = new three.Vector3
        @quat      = new three.Quaternion
        @matrix    = new three.Matrix4

        @initRenderer()
        @initCamera()
        @initLights()
        # @initFog()
        @initHelpers()
        @initComposer()
        
        post.on 'fps.toggle' => @stats.dom.style.display = @stats.dom.style.display == 'none' ? 'inherit' : 'none'
        
        window.addEventListener 'resize' @onWindowResize 
        document.addEventListener 'mousemove' @onMouseMove
        
    # 00000000   00000000  000   000  0000000    00000000  00000000   00000000  00000000   
    # 000   000  000       0000  000  000   000  000       000   000  000       000   000  
    # 0000000    0000000   000 0 000  000   000  0000000   0000000    0000000   0000000    
    # 000   000  000       000  0000  000   000  000       000   000  000       000   000  
    # 000   000  00000000  000   000  0000000    00000000  000   000  00000000  000   000  
    
    initRenderer: =>
        
        @renderer = new three.WebGLRenderer #antialias:true premultipliedAlpha:false powerPreference:'high-performance'

        @renderer.setPixelRatio window.devicePixelRatio
        @renderer.setSize @view.clientWidth @view.clientHeight
        @renderer.shadowMap.enabled = true
        @renderer.shadowMap.type = three.PCFSoftShadowMap
        @renderer.setClearColor new three.Color 0 0 0         
        @renderer.toneMapping = three.ReinhardToneMapping
        @renderer.toneMappingExposure = Math.pow 1 4.0
        @renderer.sortObjects = false

        @view.appendChild @renderer.domElement
        @renderer.setAnimationLoop @animate 
        
    #  0000000   0000000   00     00  00000000  00000000    0000000   
    # 000       000   000  000   000  000       000   000  000   000  
    # 000       000000000  000000000  0000000   0000000    000000000  
    # 000       000   000  000 0 000  000       000   000  000   000  
    #  0000000  000   000  000   000  00000000  000   000  000   000  
    
    initCamera: =>
        
        @camera = new three.PerspectiveCamera 45 @view.clientWidth / @view.clientHeight 0.1 1000
        @camera.position.set 0 0 150
        @camera.lookAt 0 0 0 
        
    #  0000000   0000000   00     00  00000000    0000000    0000000  00000000  00000000   
    # 000       000   000  000   000  000   000  000   000  000       000       000   000  
    # 000       000   000  000000000  00000000   000   000  0000000   0000000   0000000    
    # 000       000   000  000 0 000  000        000   000       000  000       000   000  
    #  0000000   0000000   000   000  000         0000000   0000000   00000000  000   000  
    
    initComposer: =>
        
        renderScene = new RenderPass @scene @camera
        
        # size = new three.Vector2 @view.clientWidth @view.clientHeight
        # size = new three.Vector2 @view.clientWidth/16 @view.clientHeight/16
        size = new three.Vector2 0 0
        
        bloomPass  = new UnrealBloomPass {x:0 y:0} 0.3 0 1.01 # strength radius threshold 
        outputPass = new OutputPass()
                
        @composer = new EffectComposer @renderer
        @composer.setPixelRatio window.devicePixelRatio
        @composer.setSize @view.clientWidth @view.clientHeight
        @composer.addPass renderScene
        @composer.addPass bloomPass
        @composer.addPass outputPass
                
    # 000      000   0000000   000   000  000000000   0000000  
    # 000      000  000        000   000     000     000       
    # 000      000  000  0000  000000000     000     0000000   
    # 000      000  000   000  000   000     000          000  
    # 0000000  000   0000000   000   000     000     0000000   
    
    initLights: =>
        
        @lightIntensityAmbient = 10
        @lightIntensityPlayer  = 10
        @lightIntensityShadow  = 20
        
        @lightAmbient = new three.AmbientLight 0xffffff @lightIntensityAmbient
        @scene.add @lightAmbient
        
        @lightPlayer = new three.PointLight 0xffffff @lightIntensityPlayer 0 0
        @lightPlayer.position.copy @camera.position
        @scene.add @lightPlayer

        @lightShadow = new three.DirectionalLight 0xffffff @lightIntensityShadow 
        @lightShadow.castShadow = true
        @lightShadow.position.set -10 30 30
        @lightShadow.target.position.set 0 0 0
        @lightShadow.shadow.mapSize.width  = 4096
        @lightShadow.shadow.mapSize.height = 4096
        @lightShadow.shadow.camera.near    = 0.5
        @lightShadow.shadow.camera.far     =  400
        @lightShadow.shadow.camera.left    = -50
        @lightShadow.shadow.camera.right   =  50
        @lightShadow.shadow.camera.top     =  50
        @lightShadow.shadow.camera.bottom  = -50
        @scene.add @lightShadow
                        
        if false
            geo = new three.PlaneGeometry 1500 1500
            @shadowFloor = new three.Mesh geo new three.ShadowMaterial color:0x000000 opacity:0.2 depthWrite:false
            @shadowFloor.rotateX deg2rad(-90)
            @shadowFloor.receiveShadow = true
            @scene.add @shadowFloor
            
    # 00000000   0000000    0000000   
    # 000       000   000  000        
    # 000000    000   000  000  0000  
    # 000       000   000  000   000  
    # 000        0000000    0000000   
    
    initFog: =>
        
        @scene.fog = new three.FogExp2 0x000000 0.01

    # 00000000   00000000   0000000  000  0000000  00000000  
    # 000   000  000       000       000     000   000       
    # 0000000    0000000   0000000   000    000    0000000   
    # 000   000  000            000  000   000     000       
    # 000   000  00000000  0000000   000  0000000  00000000  
    
    onWindowResize: =>

        @camera.aspect = @view.clientWidth / @view.clientHeight 
        @camera.updateProjectionMatrix()

        @renderer.setSize @view.clientWidth @view.clientHeight 
        @composer.setSize @view.clientWidth @view.clientHeight 

    # 00     00   0000000   000   000   0000000  00000000       00     00   0000000   000   000  00000000  
    # 000   000  000   000  000   000  000       000            000   000  000   000  000   000  000       
    # 000000000  000   000  000   000  0000000   0000000        000000000  000   000   000 000   0000000   
    # 000 0 000  000   000  000   000       000  000            000 0 000  000   000     000     000       
    # 000   000   0000000    0000000   0000000   00000000       000   000   0000000       0      00000000  
    
    onMouseMove: event =>

        event.preventDefault()

        @mouse.x =  (event.clientX / @view.clientWidth) * 2 - 1
        @mouse.y = -((event.clientY-30) / @view.clientHeight) * 2 + 1
        @mouse
        
    # 000   000  00000000  000      00000000   00000000  00000000    0000000  
    # 000   000  000       000      000   000  000       000   000  000       
    # 000000000  0000000   000      00000000   0000000   0000000    0000000   
    # 000   000  000       000      000        000       000   000       000  
    # 000   000  00000000  0000000  000        00000000  000   000  0000000   
    
    initHelpers: =>
        
        @lightShadowHelper = new three.DirectionalLightHelper @lightShadow 5 new three.Color 0xffff00
        @lightShadowHelper.visible = false
        @scene.add @lightShadowHelper
        
        @shadowCameraHelper = new three.CameraHelper @lightShadow.shadow.camera
        @shadowCameraHelper.visible = false
        @scene.add @shadowCameraHelper
        
        @axesHelper = new three.AxesHelper 50
        @axesHelper.visible = false
        @axesHelper.position.set 0 0 0
        @axesHelper.material.depthWrite = false
        @axesHelper.material.depthTest = false
        @axesHelper.material.depthFunc = three.NeverDepth
        @axesHelper.renderOrder = 1000
        @scene.add @axesHelper
        
        @gridHelper = new gridhelper()
        @gridHelper.visible = false
        @scene.add @gridHelper
        
        @stats = new Stats()
        @stats.dom.style.position = 'absolute'
        @view.appendChild @stats.dom
                        
    #  0000000   000   000  000  00     00   0000000   000000000  00000000  
    # 000   000  0000  000  000  000   000  000   000     000     000       
    # 000000000  000 0 000  000  000000000  000000000     000     0000000   
    # 000   000  000  0000  000  000 0 000  000   000     000     000       
    # 000   000  000   000  000  000   000  000   000     000     00000000  
    
    animate: =>
        
        @clockDelta = @clock.getDelta()
                    
        @stats.begin()

        @lightPlayer.position.copy @camera.position
        @lightShadow.position.copy @camera.position
        
        @quat.copy @camera.quaternion
        @vec.copy @unitX
        @vec.applyQuaternion @quat
        @vec.multiplyScalar -20
        
        @lightShadow.position.add @vec
        
        @vec.copy @unitY
        @vec.applyQuaternion @quat
        @vec.multiplyScalar 10
        @lightShadow.position.add @vec
        
        if @doPostProcess
            @composer.render()
        else
            @renderer.render @scene @camera
        
        @stats.end()
        
        @preRender? delta:@clockDelta time:@clock.elapsedTime
        
export Scene
