###
00000000  000  000      00000000        00000000  0000000    000  000000000   0000000   00000000
000       000  000      000             000       000   000  000     000     000   000  000   000
000000    000  000      0000000         0000000   000   000  000     000     000   000  0000000
000       000  000      000             000       000   000  000     000     000   000  000   000
000       000  0000000  00000000        00000000  0000000    000     000      0000000   000   000
###

kxk = require 'kxk'
{ clamp, fs, kerror, kpos, popup, post, setStyle, slash, srcmap, stopEvent } = kxk

TextEditor = require './texteditor'
Syntax     = require './syntax'
electron   = require 'electron'

function FileEditor extends TextEditor

    @: (viewElem) ->

        super viewElem,
            features: [
                'Diffbar'
                'Scrollbar'
                'Numbers'
                'Minimap'
                'Meta'
                'Autocomplete'
                'Brackets'
                'Strings'
                'CursorLine'
            ],
            fontSize: 19

        @currentFile = null

        @view.addEventListener 'contextmenu' @onContextMenu

        post.on 'commandline'   @onCommandline
        post.on 'jumpTo'        @jumpTo
        post.on 'jumpToFile'    @jumpToFile

        @initPigments()
        @initInvisibles()
        
        @setText ''

    #  0000000  000   000   0000000   000   000   0000000   00000000  0000000
    # 000       000   000  000   000  0000  000  000        000       000   000
    # 000       000000000  000000000  000 0 000  000  0000  0000000   000   000
    # 000       000   000  000   000  000  0000  000   000  000       000   000
    #  0000000  000   000  000   000  000   000   0000000   00000000  0000000

    changed: (changeInfo) ->

        super changeInfo
        
        if changeInfo.changes.length
            dirty = @do.hasChanges()
            if @dirty != dirty
                @dirty = dirty
                post.emit 'dirty' @dirty

    # 00000000  000  000      00000000
    # 000       000  000      000
    # 000000    000  000      0000000
    # 000       000  000      000
    # 000       000  0000000  00000000

    clear: ->

        @dirty = false
        @setSalterMode false
        @diffbar?.clear()
        @meta?.clear()
        @setLines ['']
        @do.reset()

    setCurrentFile: (file, restoreState) ->

        # klog 'setCurrentFile' file
        @clear()
        
        @currentFile = file

        @setupFileType()

        fileExists = @currentFile? and slash.fileExists @currentFile

        if restoreState
            @setText restoreState.text()
            @state = restoreState
            @dirty = true
        else if fileExists
            @setText slash.readText @currentFile

        if fileExists
            window.tabs.activeTab()?.setFile @currentFile
            
        post.emit 'file' @currentFile # browser & shelf

        @emit 'file' @currentFile # diffbar, pigments, ...

        post.emit 'dirty' @dirty

    currentDir: ->
        
        if @currentFile? and slash.fileExists @currentFile
            slash.dir @currentFile
        else
            slash.path process.cwd()
        
    restoreFromTabState: (tabState) ->

        return kerror "no tabState.file?" if not tabState.file?
        @setCurrentFile tabState.file, tabState.state

    # 000000000  000   000  00000000   00000000
    #    000      000 000   000   000  000
    #    000       00000    00000000   0000000
    #    000        000     000        000
    #    000        000     000        00000000

    shebangFileType: ->

        fileType = Syntax.shebang @line(0) if @numLines()
        if fileType == 'txt'
            if @currentFile?
                ext = slash.ext @currentFile
                if ext in Syntax.syntaxNames
                    return ext
        else if fileType
            return fileType

        super()

    #  0000000   0000000   00     00  00     00   0000000   000   000  0000000    000      000  000   000  00000000
    # 000       000   000  000   000  000   000  000   000  0000  000  000   000  000      000  0000  000  000
    # 000       000   000  000000000  000000000  000000000  000 0 000  000   000  000      000  000 0 000  0000000
    # 000       000   000  000 0 000  000 0 000  000   000  000  0000  000   000  000      000  000  0000  000
    #  0000000   0000000   000   000  000   000  000   000  000   000  0000000    0000000  000  000   000  00000000

    onCommandline: (e) =>

        switch e
            when 'hidden' 'shown'
                d = window.split.commandlineHeight + window.split.handleHeight
                d = Math.min d, @scroll.scrollMax - @scroll.scroll
                d *= -1 if e == 'hidden'
                @scroll.by d

    #  0000000   0000000   000   000  00000000
    # 000       000   000  000   000  000
    # 0000000   000000000   000 000   0000000
    #      000  000   000     000     000
    # 0000000   000   000      0      00000000

    saveScrollCursorsAndSelections: (opt) ->

        return if not @currentFile
        s = {}

        s.main       = @state.main()
        s.cursors    = @state.cursors()    if @numCursors() > 1 or @cursorPos()[0] or @cursorPos()[1]
        s.selections = @state.selections() if @numSelections() and @numSelections() < 10
        s.highlights = @state.highlights() if @numHighlights() and @numHighlights() < 10

        s.scroll = @scroll.scroll if @scroll.scroll

        filePositions = window.stash.get 'filePositions' Object.create null
        
        if not filePositions or typeof(filePositions) != 'object'
            filePositions = Object.create null
            
        filePositions[@currentFile] = s
        window.stash.set 'filePositions' filePositions

    # 00000000   00000000   0000000  000000000   0000000   00000000   00000000
    # 000   000  000       000          000     000   000  000   000  000
    # 0000000    0000000   0000000      000     000   000  0000000    0000000
    # 000   000  000            000     000     000   000  000   000  000
    # 000   000  00000000  0000000      000      0000000   000   000  00000000

    restoreScrollCursorsAndSelections: ->

        return if not @currentFile
        
        filePositions = window.stash.get 'filePositions' {}

        if filePositions[@currentFile]?

            s = filePositions[@currentFile]

            cursors = s.cursors ? [[0,0]]
            cursors = cursors.map (c) => [c[0], clamp(0,@numLines()-1,c[1])]

            @setCursors    cursors
            @setSelections s.selections ? []
            @setHighlights s.highlights ? []
            @setMain       s.main ? 0
            @setState @state

            @scroll.to s.scroll if s.scroll
            @scroll.cursorIntoView()

        else

            @singleCursorAtPos [0,0]
            @scroll.top = 0 if @mainCursor()[1] == 0
            @scroll.bot = @scroll.top-1
            @scroll.to 0
            @scroll.cursorIntoView()

        @updateLayers()
        @numbers?.updateColors()
        @minimap.onEditorScroll()
        @emit 'cursor'
        @emit 'selection'

    #       000  000   000  00     00  00000000
    #       000  000   000  000   000  000   000
    #       000  000   000  000000000  00000000
    # 000   000  000   000  000 0 000  000
    #  0000000    0000000   000   000  000

    jumpToFile: (opt) =>

        # klog 'jumpToFile' opt
        
        window.tabs.activeTab true

        if opt.newTab

            file = opt.file
            file += ':' + opt.line if opt.line
            file += ':' + opt.col if opt.col
            post.emit 'newTabWithFile' file

        else if window.lastFocus == 'editor'
            
            [file, fpos] = slash.splitFilePos opt.file
            opt.pos = fpos
            opt.pos[0] = opt.col if opt.col
            opt.pos[1] = opt.line-1 if opt.line
            opt.winID  = window.winID

            opt.oldPos = @cursorPos()
            opt.oldFile = @currentFile
            window.navigate.gotoFilePos opt
        else
            file = slash.joinFileLine opt.file, opt.line, opt.col
            # klog 'bypass navigation history' file
            post.emit 'loadFile' file

    jumpTo: (word, opt) =>

        if typeof(word) == 'object' and not opt?
            opt  = word
            word = opt.word

        opt ?= {}

        if opt.file?
            @jumpToFile opt
            return true

        return kerror 'nothing to jump to?' if empty word

        find = word.toLowerCase().trim()
        find = find.slice 1 if find[0] == '@'

        return kerror 'FileEditor.jumpTo -- nothing to find?' if empty find

        type = opt?.type

        if not type or type == 'class'
            classes = post.get 'indexer' 'classes'
            for clss, info of classes
                if clss.toLowerCase() == find
                    @jumpToFile info
                    return true

        if not type or type == 'func'
            funcs = post.get 'indexer' 'funcs'
            for func, infos of funcs
                if func.toLowerCase() == find
                    info = infos[0]
                    for i in infos
                        if i.file == @currentFile
                            info = i
                    @jumpToFile info
                    return true

        if not type or type == 'file'
            files = post.get 'indexer' 'files'
            for file, info of files
                if slash.base(file).toLowerCase() == find and file != @currentFile
                    @jumpToFile file:file, line:6

        window.commandline.commands.search.start 'search'
        window.commandline.commands.search.execute word

        window.split.do 'show terminal'

        true

    #  0000000   0000000   000   000  000   000  000000000  00000000  00000000   00000000    0000000   00000000   000000000
    # 000       000   000  000   000  0000  000     000     000       000   000  000   000  000   000  000   000     000
    # 000       000   000  000   000  000 0 000     000     0000000   0000000    00000000   000000000  0000000       000
    # 000       000   000  000   000  000  0000     000     000       000   000  000        000   000  000   000     000
    #  0000000   0000000    0000000   000   000     000     00000000  000   000  000        000   000  000   000     000

    jumpToCounterpart: () ->

        cp = @cursorPos()
        currext = slash.ext @currentFile

        switch currext
            when 'coffee' 'kode'
                [file,line,col] = srcmap.toJs @currentFile, cp[1]+1, cp[0]
            when 'js'
                [file,line,col] = srcmap.toKode @currentFile, cp[1]+1, cp[0]
                if not slash.fileExists file
                    [file,line,col] = srcmap.toCoffee @currentFile, cp[1]+1, cp[0]

        log 'counterpart' @currentFile, file, line, col
                
        if valid(file) and not slash.samePath(@currentFile, file) and slash.fileExists file
            post.emit 'loadFile' slash.joinFileLine file,line,col
            return true

        counterparts =
            cpp:     ['hpp' 'h']
            cc:      ['hpp' 'h']
            h:       ['cpp' 'c']
            hpp:     ['cpp' 'c']
            coffee:  ['js']
            kode:    ['js']
            js:      ['coffee' 'kode']
            pug:     ['html']
            html:    ['pug']
            css:     ['styl']
            styl:    ['css']

        for ext in counterparts[currext] ? []
            if slash.fileExists slash.swapExt @currentFile, ext
                post.emit 'loadFile' slash.swapExt @currentFile, ext
                return true

        for ext in counterparts[currext] ? []
            counter = slash.swapExt @currentFile, ext

            counter = @swapLastDir counter, currext, ext
            if slash.fileExists counter
                post.emit 'loadFile' counter
                return true
                
        log 'cant find counterpart' @currentFile
        false

    swapLastDir: (path, from, to) ->
        
        lastIndex = path.lastIndexOf "/#{from}/"
        if lastIndex >= 0
            path = path[..lastIndex] + to + path[lastIndex+("/#{from}").length..]
        path
        
    #  0000000  00000000  000   000  000000000  00000000  00000000
    # 000       000       0000  000     000     000       000   000
    # 000       0000000   000 0 000     000     0000000   0000000
    # 000       000       000  0000     000     000       000   000
    #  0000000  00000000  000   000     000     00000000  000   000

    centerText: (center, animate=300) ->

        @size.centerText = center
        @updateLayers()

        @size.offsetX = Math.floor @size.charWidth/2 + @size.numbersWidth
        if center
            br        = @view.getBoundingClientRect()
            visCols   = parseInt br.width / @size.charWidth
            newOffset = parseInt @size.charWidth * (visCols - 100) / 2
            @size.offsetX = Math.max @size.offsetX, newOffset
            @size.centerText = true
        else
            @size.centerText = false

        @updateLinePositions animate

        if animate
            layers = ['.selections' '.highlights' '.cursors']
            transi = ['.selection'  '.highlight'  '.cursor' ].concat layers
            resetTrans = =>
                setStyle '.editor .layers '+l, 'transform' "translateX(0)" for l in layers
                setStyle '.editor .layers '+t, 'transition' "initial" for t in transi
                @updateLayers()

            if center
                offsetX = @size.offsetX - @size.numbersWidth - @size.charWidth/2
            else
                offsetX = Math.floor @size.charWidth/2 + @size.numbersWidth
                offsetX -= @size.numbersWidth + @size.charWidth/2
                offsetX *= -1

            setStyle '.editor .layers '+l, 'transform' "translateX(#{offsetX}px)" for l in layers
            setStyle '.editor .layers '+t, 'transition' "all #{animate/1000}s" for t in transi
            setTimeout resetTrans, animate
        else
            @updateLayers()

    # 00000000    0000000   00000000   000   000  00000000
    # 000   000  000   000  000   000  000   000  000   000
    # 00000000   000   000  00000000   000   000  00000000
    # 000        000   000  000        000   000  000
    # 000         0000000   000         0000000   000

    onContextMenu: (event) => stopEvent event, @showContextMenu kpos event

    showContextMenu: (absPos) =>

        if not absPos?
            absPos = kpos @view.getBoundingClientRect().left, @view.getBoundingClientRect().top

        opt = items: [
            text:   'Browse'
            combo:  'command+.'
            accel:  'ctrl+.'
            cb:     -> window.commandline.startCommand 'browse'
        ,
            text:   'Back'
            combo:  'command+1'
            cb:     -> post.emit 'menuAction' 'Navigate Backward'
        ,
            text:   ''
        ,
            text:   'Maximize'
            combo:  'command+shift+y'
            accel:  'ctrl+shift+y'
            cb:     -> window.split.maximizeEditor()
        ,
            text:   ''
        ]

        opt.items = opt.items.concat window.titlebar.menuTemplate()

        RecentMenu = []
        
        fileSpan = (f) ->
            if f?
                span  = Syntax.spanForTextAndSyntax slash.tilde(slash.dir(f)), 'browser'
                span += Syntax.spanForTextAndSyntax '/' + slash.base(f), 'browser'
            return span
        
        recent = window.state?.get 'recentFiles' []
        recent ?= []
        for f in recent
            if fs.existsSync f
                RecentMenu.unshift
                    html: fileSpan f
                    arg: f
                    cb: (arg) -> post.emit 'newTabWithFile' arg
        
        getMenu = (template, name) ->
            for item in template
                if item.text == name
                    return item
                                
        if RecentMenu.length
            RecentMenu.push text: ''
            RecentMenu.push text: 'Clear List'
            fileMenu = getMenu opt.items, 'File'
            fileMenu.menu = [{text:'Recent' menu:RecentMenu}, {text:''}].concat fileMenu.menu
        
        opt.x = absPos.x
        opt.y = absPos.y
        popup.menu opt

    #  0000000  000      000   0000000  000   000
    # 000       000      000  000       000  000
    # 000       000      000  000       0000000
    # 000       000      000  000       000  000
    #  0000000  0000000  000   0000000  000   000

    clickAtPos: (p, event) ->

        if event.metaKey
            if kpos(event).x <= @size.numbersWidth
                @singleCursorAtPos p
                return

        super p, event

    # 000   000  00000000  000   000
    # 000  000   000        000 000
    # 0000000    0000000     00000
    # 000  000   000          000
    # 000   000  00000000     000

    handleModKeyComboCharEvent: (mod, key, combo, char, event) ->

        return if 'unhandled' != super mod, key, combo, char, event
        switch combo
            when 'alt+ctrl+enter'       then return window.commandline.commands.coffee.executeText @textOfSelectionForClipboard()
            when 'alt+ctrl+shift+enter' then return window.commandline.commands.coffee.executeTextInMain @textOfSelectionForClipboardt()
            when 'command+alt+up' 'alt+o' then return @jumpToCounterpart()
            when 'esc'
                split = window.split
                if split.terminalVisible()
                    split.hideTerminal()
                else if split.commandlineVisible()
                    split.hideCommandline()
                return
        'unhandled'

module.exports = FileEditor
