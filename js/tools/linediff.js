// koffee 1.16.0

/*
000      000  000   000  00000000  0000000    000  00000000  00000000  
000      000  0000  000  000       000   000  000  000       000       
000      000  000 0 000  0000000   000   000  000  000000    000000    
000      000  000  0000  000       000   000  000  000       000       
0000000  000  000   000  00000000  0000000    000  000       000
 */
var empty, last, lineDiff, ref;

ref = require('kxk'), empty = ref.empty, last = ref.last;

lineDiff = function(oldLine, newLine) {
    var changes, deletes, inserts, lst, nc, ni, oc, oi;
    changes = [];
    oi = 0;
    ni = 0;
    if (oldLine !== newLine) {
        oc = oldLine[oi];
        nc = newLine[ni];
        while (oi < oldLine.length) {
            if (nc == null) {
                changes.push({
                    change: 'delete',
                    old: oi,
                    "new": ni,
                    length: oldLine.length - oi
                });
                break;
            } else if (oc === nc) {
                oi += 1;
                oc = oldLine[oi];
                ni += 1;
                nc = newLine[ni];
            } else {
                inserts = newLine.slice(ni).indexOf(oc);
                deletes = oldLine.slice(oi).indexOf(nc);
                if (inserts > 0 && (deletes <= 0 || inserts < deletes)) {
                    changes.push({
                        change: 'insert',
                        old: oi,
                        "new": ni,
                        length: inserts
                    });
                    ni += inserts;
                    nc = newLine[ni];
                } else if (deletes > 0 && (inserts <= 0 || deletes < inserts)) {
                    changes.push({
                        change: 'delete',
                        old: oi,
                        "new": ni,
                        length: deletes
                    });
                    oi += deletes;
                    oc = oldLine[oi];
                } else {
                    lst = last(changes);
                    if ((lst != null ? lst.change : void 0) === 'change' && lst.old + lst.length === oi) {
                        lst.length += 1;
                    } else {
                        changes.push({
                            change: 'change',
                            old: oi,
                            "new": ni,
                            length: 1
                        });
                    }
                    oi += 1;
                    oc = oldLine[oi];
                    ni += 1;
                    nc = newLine[ni];
                }
            }
        }
        if (ni < newLine.length) {
            changes.push({
                change: 'insert',
                old: oi,
                "new": ni,
                length: newLine.length - ni
            });
        }
    }
    return changes;
};

lineDiff.isBoring = function(oldLine, newLine) {
    var c, changes, deletes, i, inserts, len;
    changes = lineDiff(oldLine, newLine);
    if (empty(changes)) {
        return true;
    }
    inserts = '';
    deletes = '';
    for (i = 0, len = changes.length; i < len; i++) {
        c = changes[i];
        switch (c.change) {
            case 'change':
                return false;
            case 'delete':
                deletes += oldLine.substr(c.old, c.length).trim();
                break;
            case 'insert':
                inserts += newLine.substr(c["new"], c.length).trim();
        }
    }
    return inserts === deletes;
};

module.exports = lineDiff;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/tools/linediff.coffee