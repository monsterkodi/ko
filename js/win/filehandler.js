// koffee 1.14.0

/*
00000000  000  000      00000000  000   000   0000000   000   000  0000000    000      00000000  00000000 
000       000  000      000       000   000  000   000  0000  000  000   000  000      000       000   000
000000    000  000      0000000   000000000  000000000  000 0 000  000   000  000      0000000   0000000  
000       000  000      000       000   000  000   000  000  0000  000   000  000      000       000   000
000       000  0000000  00000000  000   000  000   000  000   000  0000000    0000000  00000000  000   000
 */
var File, FileHandler, _, electron, empty, filelist, first, kerror, klog, post, prefs, ref, reversed, slash, valid,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), _ = ref._, empty = ref.empty, filelist = ref.filelist, first = ref.first, kerror = ref.kerror, klog = ref.klog, post = ref.post, prefs = ref.prefs, reversed = ref.reversed, slash = ref.slash, valid = ref.valid;

File = require('../tools/file');

electron = require('electron');

FileHandler = (function() {
    function FileHandler() {
        this.saveFileAs = bind(this.saveFileAs, this);
        this.openFile = bind(this.openFile, this);
        this.saveChanges = bind(this.saveChanges, this);
        this.saveFile = bind(this.saveFile, this);
        this.saveAll = bind(this.saveAll, this);
        this.removeFile = bind(this.removeFile, this);
        this.reloadFile = bind(this.reloadFile, this);
        this.reloadTab = bind(this.reloadTab, this);
        this.openFiles = bind(this.openFiles, this);
        this.loadFile = bind(this.loadFile, this);
        post.on('reloadFile', this.reloadFile);
        post.on('removeFile', this.removeFile);
        post.on('saveFileAs', this.saveFileAs);
        post.on('saveFile', this.saveFile);
        post.on('saveAll', this.saveAll);
        post.on('saveChanges', this.saveChanges);
        post.on('reloadTab', this.reloadTab);
        post.on('loadFile', this.loadFile);
        post.on('openFile', this.openFile);
        post.on('openFiles', this.openFiles);
    }

    FileHandler.prototype.loadFile = function(file, opt) {
        var activeTab, err, fileExists, filePos, ref1, tab;
        if (opt == null) {
            opt = {};
        }
        if ((file != null) && file.length <= 0) {
            file = null;
        }
        editor.saveScrollCursorsAndSelections();
        if (file != null) {
            ref1 = slash.splitFilePos(file), file = ref1[0], filePos = ref1[1];
            if (!file.startsWith('untitled')) {
                file = slash.resolve(file);
                try {
                    process.chdir(slash.dir(file));
                } catch (error) {
                    err = error;
                    kerror(err);
                }
            }
        }
        if (file !== (typeof editor !== "undefined" && editor !== null ? editor.currentFile : void 0) || (opt != null ? opt.reload : void 0)) {
            if (fileExists = slash.fileExists(file)) {
                this.addToRecent(file);
            }
            tab = tabs.tab(file);
            if (empty(tab)) {
                tab = tabs.addTmpTab(file);
            }
            if (activeTab = tabs.activeTab()) {
                if (tab !== activeTab) {
                    activeTab.clearActive();
                    if (activeTab.dirty) {
                        activeTab.storeState();
                    }
                }
            }
            klog('fileHandler.loadFile', file, opt);
            editor.setCurrentFile(file);
            tab.finishActivation();
            klog('fileHandler.loadFile restore');
            editor.restoreScrollCursorsAndSelections();
            klog('fileHandler.loadFile done');
            if (fileExists) {
                post.toOtherWins('fileLoaded', file);
                post.emit('cwdSet', slash.dir(file));
            }
        }
        split.raise('editor');
        if ((filePos != null) && (filePos[0] || filePos[1])) {
            editor.singleCursorAtPos(filePos);
            return editor.scroll.cursorToTop();
        }
    };

    FileHandler.prototype.openFiles = function(ofiles, options) {
        var file, files, i, len, maxTabs;
        if (options != null) {
            options;
        } else {
            options = {};
        }
        if (ofiles != null ? ofiles.length : void 0) {
            files = filelist(ofiles, {
                ignoreHidden: false
            });
            maxTabs = prefs.get('maximalNumberOfTabs', 8);
            if (!options.newWindow) {
                files = files.slice(0, maxTabs);
            }
            if (files.length >= Math.max(11, maxTabs) && !options.skipCheck) {
                window.win.messageBox({
                    type: 'warning',
                    buttons: ['Cancel', 'Open All'],
                    defaultId: 1,
                    cancelId: 0,
                    title: 'A Lot of Files Warning',
                    message: "You have selected " + files.length + " files.",
                    detail: 'Are you sure you want to open that many files?',
                    cb: (function(_this) {
                        return function(answer) {
                            if (answer === 1) {
                                options.skipCheck = true;
                                return _this.openFiles(ofiles, options);
                            }
                        };
                    })(this)
                });
                return;
            }
            if (files.length === 0) {
                return [];
            }
            window.stash.set('openFilePath', slash.dir(files[0]));
            if (!options.newWindow && !options.newTab) {
                file = slash.resolve(files.shift());
                this.loadFile(file);
            }
            for (i = 0, len = files.length; i < len; i++) {
                file = files[i];
                if (options.newWindow) {
                    post.toMain('newWindowWithFile', file);
                } else {
                    post.emit('newTabWithFile', file);
                }
            }
            return ofiles;
        }
    };

    FileHandler.prototype.reloadTab = function(file) {
        if (file === (typeof editor !== "undefined" && editor !== null ? editor.currentFile : void 0)) {
            return this.loadFile(typeof editor !== "undefined" && editor !== null ? editor.currentFile : void 0, {
                reload: true
            });
        } else {
            return post.emit('revertFile', file);
        }
    };

    FileHandler.prototype.reloadFile = function(file) {
        var tab;
        if (!file) {
            return this.reloadActiveTab();
        } else if (tab = tabs.tab(file)) {
            if (tab === tabs.activeTab()) {
                return this.reloadActiveTab();
            } else {
                return tab.reload();
            }
        }
    };

    FileHandler.prototype.reloadActiveTab = function() {
        var tab;
        if (tab = tabs.activeTab()) {
            tab.reload();
        }
        this.loadFile(editor.currentFile, {
            reload: true
        });
        if (editor.currentFile != null) {
            return post.toOtherWins('reloadTab', editor.currentFile);
        }
    };

    FileHandler.prototype.removeFile = function(file) {
        var neighborTab, tab;
        if (tab = tabs.tab(file)) {
            if (tab === tabs.activeTab()) {
                if (neighborTab = tab.nextOrPrev()) {
                    neighborTab.activate();
                }
            }
            return tabs.closeTab(tab);
        }
    };

    FileHandler.prototype.saveAll = function() {
        var i, len, ref1, results, tab;
        ref1 = tabs.tabs;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
            tab = ref1[i];
            if (tab.dirty) {
                if (tab === tabs.activeTab()) {
                    results.push(this.saveFile(tab.file));
                } else {
                    if (!tab.file.startsWith('untitled')) {
                        results.push(tab.saveChanges());
                    } else {
                        results.push(void 0);
                    }
                }
            } else {
                results.push(void 0);
            }
        }
        return results;
    };

    FileHandler.prototype.saveFile = function(file) {
        var err, tabState;
        if (file != null) {
            file;
        } else {
            file = editor.currentFile;
        }
        if ((file == null) || file.startsWith('untitled')) {
            this.saveFileAs();
            return;
        }
        post.emit('unwatch', file);
        tabState = editor["do"].tabState();
        try {
            post.emit('menuAction', 'doMacro', {
                actarg: 'req'
            });
        } catch (error) {
            err = error;
            kerror("macro req failed " + err);
        }
        return File.save(file, editor.text(), function(err, saved) {
            editor.saveScrollCursorsAndSelections();
            if (valid(err)) {
                kerror("saving '" + file + "' failed:", err);
            } else {
                editor.setCurrentFile(saved);
                editor["do"].history = tabState.history;
                editor["do"].saveIndex = tabState.history.length;
                post.toOtherWins('fileSaved', saved, window.winID);
                post.emit('saved', saved);
                post.emit('watch', saved);
            }
            return editor.restoreScrollCursorsAndSelections();
        });
    };

    FileHandler.prototype.addToRecent = function(file) {
        var recent;
        recent = window.state.get('recentFiles', []);
        if (file === first(recent)) {
            return;
        }
        _.pull(recent, file);
        recent.unshift(file);
        while (recent.length > prefs.get('recentFilesLength', 15)) {
            recent.pop();
        }
        window.state.set('recentFiles', recent);
        return commandline.commands.open.setHistory(reversed(recent));
    };

    FileHandler.prototype.saveChanges = function() {
        if ((editor.currentFile != null) && editor["do"].hasChanges() && slash.fileExists(editor.currentFile)) {
            return File.save(editor.currentFile, editor.text(), function(err) {
                if (err) {
                    return kerror("FileHandler.saveChanges failed " + err);
                }
            });
        }
    };

    FileHandler.prototype.openFile = function(opt) {
        var dir, ref1;
        if (typeof editor !== "undefined" && editor !== null ? editor.currentFile : void 0) {
            dir = slash.dir(editor.currentFile);
        }
        if (dir != null) {
            dir;
        } else {
            dir = slash.resolve('.');
        }
        return (ref1 = window.win) != null ? ref1.openFileDialog({
            title: 'Open File',
            defaultPath: window.stash.get('openFilePath', dir),
            properties: ['openFile', 'multiSelections'],
            cb: (function(_this) {
                return function(files) {
                    return post.emit('openFiles', files, opt);
                };
            })(this)
        }) : void 0;
    };

    FileHandler.prototype.saveFileAs = function() {
        var ref1;
        return (ref1 = window.win) != null ? ref1.saveFileDialog({
            title: 'Save File As',
            defaultPath: slash.unslash(typeof editor !== "undefined" && editor !== null ? editor.currentDir() : void 0),
            cb: (function(_this) {
                return function(file) {
                    klog('saveFileAs', file);
                    _this.addToRecent(file);
                    return _this.saveFile(file);
                };
            })(this)
        }) : void 0;
    };

    return FileHandler;

})();

module.exports = FileHandler;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/win/filehandler.coffee