// koffee 1.16.0

/*
00000000    0000000   000   000
000   000  000   000  000 0 000
0000000    000   000  000000000
000   000  000   000  000   000
000   000   0000000   00     00
 */
var $, File, Row, Syntax, _, electron, elem, empty, keyinfo, post, ref, slash, stopEvent,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), $ = ref.$, _ = ref._, elem = ref.elem, empty = ref.empty, keyinfo = ref.keyinfo, post = ref.post, slash = ref.slash, stopEvent = ref.stopEvent;

Syntax = require('../editor/syntax');

electron = require('electron');

File = require('../tools/file');

Row = (function() {
    function Row(column, item) {
        var html, ref1, ref2, text;
        this.column = column;
        this.item = item;
        this.rename = bind(this.rename, this);
        this.onNameChange = bind(this.onNameChange, this);
        this.onNameFocusOut = bind(this.onNameFocusOut, this);
        this.onNameKeyDown = bind(this.onNameKeyDown, this);
        this.editName = bind(this.editName, this);
        this.activate = bind(this.activate, this);
        this.browser = this.column.browser;
        text = (ref1 = this.item.text) != null ? ref1 : this.item.name;
        if (empty(text) || empty(text.trim())) {
            html = '<span> </span>';
        } else {
            html = Syntax.spanForTextAndSyntax(text, 'browser');
        }
        this.div = elem({
            "class": 'browserRow',
            html: html
        });
        this.div.classList.add(this.item.type);
        this.column.table.appendChild(this.div);
        if (((ref2 = this.item.type) === 'file' || ref2 === 'dir') || this.item.icon) {
            this.setIcon();
        }
    }

    Row.prototype.next = function() {
        return this.index() < this.column.numRows() - 1 && this.column.rows[this.index() + 1] || null;
    };

    Row.prototype.prev = function() {
        return this.index() > 0 && this.column.rows[this.index() - 1] || null;
    };

    Row.prototype.index = function() {
        return this.column.rows.indexOf(this);
    };

    Row.prototype.onMouseOut = function() {
        return this.div.classList.remove('hover');
    };

    Row.prototype.onMouseOver = function() {
        return this.div.classList.add('hover');
    };

    Row.prototype.path = function() {
        var ref1;
        if ((this.item.file != null) && _.isString(this.item.file)) {
            return this.item.file;
        }
        if ((((ref1 = this.item.obj) != null ? ref1.file : void 0) != null) && _.isString(this.item.obj.file)) {
            return this.item.obj.file;
        }
    };

    Row.prototype.setIcon = function() {
        var className, icon, ref1;
        if (this.item.icon) {
            className = this.item.icon;
        } else {
            if (this.item.type === 'dir') {
                className = 'folder-icon';
            } else {
                className = File.iconClassName(this.item.file);
            }
        }
        if (slash.base(this.item.file).startsWith('.')) {
            className += ' dotfile';
        }
        icon = elem('span', {
            "class": className + ' browserFileIcon'
        });
        return (ref1 = this.div.firstChild) != null ? ref1.insertBefore(icon, this.div.firstChild.firstChild) : void 0;
    };

    Row.prototype.activate = function(event, emit) {
        var col, opt, ref1;
        if (emit == null) {
            emit = true;
        }
        if (this.column.index < 0) {
            this.column.activateRow(this);
            return;
        }
        if ((ref1 = $('.hover')) != null) {
            ref1.classList.remove('hover');
        }
        this.setActive({
            emit: emit
        });
        opt = {
            file: this.item.file
        };
        switch (this.item.type) {
            case 'dir':
            case 'file':
                post.emit('filebrowser', 'activateItem', this.item, this.column.index);
                col = this.column.index;
                this.browser.select.row(this, false);
                break;
            default:
                opt.line = this.item.line;
                opt.col = this.item.column;
                this.browser.clearColumnsFrom(this.column.index + 1, {
                    pop: true
                });
                if (emit) {
                    post.emit('jumpToFile', opt);
                }
        }
        return this;
    };

    Row.prototype.isActive = function() {
        return this.div.classList.contains('active');
    };

    Row.prototype.setActive = function(opt) {
        var ref1;
        if (opt == null) {
            opt = {};
        }
        if (this.column.activeRow() !== this) {
            if ((ref1 = this.column.activeRow()) != null) {
                ref1.clearActive();
            }
        }
        this.div.classList.add('active');
        if ((opt != null ? opt.scroll : void 0) !== false) {
            this.column.scroll.toIndex(this.index());
        }
        if (opt != null ? opt.emit : void 0) {
            this.browser.emit('itemActivated', this.item);
            if (this.item.type === 'dir') {
                post.emit('setCWD', this.item.file);
            } else if (this.item.type === 'file') {
                post.emit('setCWD', slash.dir(this.item.file));
            }
        }
        return this;
    };

    Row.prototype.clearActive = function() {
        this.div.classList.remove('active');
        return this;
    };

    Row.prototype.isSelected = function() {
        return this.div.classList.contains('selected');
    };

    Row.prototype.setSelected = function() {
        this.div.classList.add('selected');
        return this;
    };

    Row.prototype.clearSelected = function() {
        this.div.classList.remove('selected');
        return this;
    };

    Row.prototype.editName = function() {
        if (this.input != null) {
            return;
        }
        this.input = elem('input', {
            "class": 'rowNameInput'
        });
        this.input.value = slash.file(this.item.file);
        this.div.appendChild(this.input);
        this.input.addEventListener('change', this.onNameChange);
        this.input.addEventListener('keydown', this.onNameKeyDown);
        this.input.addEventListener('focusout', this.onNameFocusOut);
        this.input.focus();
        return this.input.setSelectionRange(0, slash.base(this.item.file).length);
    };

    Row.prototype.onNameKeyDown = function(event) {
        var combo, key, mod, ref1;
        ref1 = keyinfo.forEvent(event), mod = ref1.mod, key = ref1.key, combo = ref1.combo;
        switch (combo) {
            case 'esc':
                if (this.input.value !== slash.file(this.item.file)) {
                    this.input.value = slash.file(this.item.file);
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
                this.onNameFocusOut();
                break;
            case 'enter':
                if (this.input.value !== slash.file(this.item.file)) {
                    this.onNameChange();
                } else {
                    this.removeInput();
                }
                stopEvent(event);
        }
        return event.stopPropagation();
    };

    Row.prototype.removeInput = function() {
        if (this.input == null) {
            return;
        }
        this.input.removeEventListener('focusout', this.onNameFocusOut);
        this.input.removeEventListener('change', this.onNameChange);
        this.input.removeEventListener('keydown', this.onNameKeyDown);
        this.input.remove();
        delete this.input;
        this.input = null;
        if ((document.activeElement == null) || document.activeElement === document.body) {
            return this.column.focus({
                activate: false
            });
        }
    };

    Row.prototype.onNameFocusOut = function(event) {
        return this.removeInput();
    };

    Row.prototype.onNameChange = function(event) {
        var targetFile;
        targetFile = slash.join(slash.dir(this.item.file), this.input.value.trim());
        this.removeInput();
        return this.rename(targetFile);
    };

    Row.prototype.rename = function(targetFile) {
        if (slash.samePath(this.item.file, targetFile)) {
            return;
        }
        return File.rename(this.item.file, targetFile, (function(_this) {
            return function(source, target) {};
        })(this));
    };

    return Row;

})();

module.exports = Row;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/browser/row.coffee