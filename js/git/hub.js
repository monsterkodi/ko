// koffee 1.18.0

/*
000   000  000   000  0000000    
000   000  000   000  000   000  
000000000  000   000  0000000    
000   000  000   000  000   000  
000   000   0000000   0000000
 */
var Hub, diff, diffs, filter, info, post, ref, root, roots, stati, status, valid, watch, watchers;

ref = require('kxk'), filter = ref.filter, post = ref.post, valid = ref.valid, watch = ref.watch;

watch = require('./watch');

status = require('./status');

diff = require('./diff');

info = require('./info');

root = require('./root');

watchers = {};

roots = {};

stati = {};

diffs = {};

Hub = (function() {
    function Hub() {}

    Hub.refresh = function() {
        stati = {};
        roots = {};
        return diffs = {};
    };

    Hub.watch = function(gitDir) {
        if (watchers[gitDir]) {
            return;
        }
        return watchers[gitDir] = new watch(gitDir, Hub.onGitRefChanged);
    };

    Hub.onGitRefChanged = function(gitDir) {
        delete stati[gitDir];
        diffs = filter(diffs, function(v, k) {
            return !(typeof k.startsWith === "function" ? k.startsWith(gitDir) : void 0);
        });
        return Hub.status(gitDir, function(status) {
            return post.emit('gitStatus', gitDir, status);
        });
    };

    Hub.onSaved = function(file) {
        if (diffs[file]) {
            delete diffs[file];
            Hub.diff(file, function(changes) {
                return post.emit('gitDiff', file, changes);
            });
        }
        return Hub.applyRoot(file, function(gitDir) {
            if (gitDir) {
                return Hub.onGitRefChanged(gitDir);
            }
        });
    };

    Hub.diff = function(file, cb) {
        if (diffs[file]) {
            return cb(diffs[file]);
        } else {
            return diff(file, function(changes) {
                diffs[file] = changes;
                return cb(changes);
            });
        }
    };

    Hub.status = function(dirOrFile, cb) {
        var rootStatus;
        rootStatus = function(cb) {
            return function(gitDir) {
                if (stati[gitDir]) {
                    return cb(stati[gitDir]);
                } else {
                    return status(gitDir, function(info) {
                        stati[gitDir] = info;
                        return cb(info);
                    });
                }
            };
        };
        return Hub.applyRoot(dirOrFile, rootStatus(cb));
    };

    Hub.statusFiles = function(status) {
        var file, files, i, j, key, len, len1, ref1, ref2;
        files = {};
        ref1 = ['changed', 'added', 'dirs'];
        for (i = 0, len = ref1.length; i < len; i++) {
            key = ref1[i];
            if (valid(status[key])) {
                ref2 = status[key];
                for (j = 0, len1 = ref2.length; j < len1; j++) {
                    file = ref2[j];
                    files[file] = key;
                }
            }
        }
        return files;
    };

    Hub.info = function(dirOrFile, cb) {
        var rootInfo;
        rootInfo = function(cb) {
            return function(gitDir) {
                return info(gitDir, function(info) {
                    return cb(info);
                });
            };
        };
        return Hub.applyRoot(dirOrFile, rootInfo(cb));
    };

    Hub.applyRoot = function(dirOrFile, cb) {
        if (roots[dirOrFile]) {
            return cb(roots[dirOrFile]);
        } else {
            return root(dirOrFile, function(gitDir) {
                roots[dirOrFile] = gitDir;
                roots[gitDir] = gitDir;
                Hub.watch(gitDir);
                return cb(gitDir);
            });
        }
    };

    return Hub;

})();

post.on('saved', Hub.onSaved);

module.exports = Hub;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/git/hub.coffee