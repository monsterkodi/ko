// koffee 1.19.0
var reversed,
    indexOf = [].indexOf;

reversed = require('kxk').reversed;

module.exports = {
    actions: {
        toggleGitChange: {
            name: 'Toggle Git Changes at Cursors',
            combo: 'command+u',
            accel: 'ctrl+u'
        }
    },
    toggleGitChange: function(key, info) {
        return this.toggleGitChangesInLines(this.selectedAndCursorLineIndices());
    },
    toggleGitChangesInLines: function(lineIndices) {
        var cursors, i, j, k, l, len, len1, len2, len3, li, lineMeta, metas, offset, oi, ref, untoggled;
        metas = [];
        untoggled = false;
        this["do"].start();
        this["do"].setCursors([this.mainCursor()]);
        this["do"].select([]);
        this["do"].end();
        for (i = 0, len = lineIndices.length; i < len; i++) {
            li = lineIndices[i];
            ref = this.meta.metasAtLineIndex(li);
            for (j = 0, len1 = ref.length; j < len1; j++) {
                lineMeta = ref[j];
                if (lineMeta[2].clss.startsWith('git')) {
                    if (!lineMeta[2].toggled) {
                        untoggled = true;
                    }
                    metas.push(lineMeta);
                }
            }
        }
        for (k = 0, len2 = metas.length; k < len2; k++) {
            lineMeta = metas[k];
            oi = lineMeta[0];
            if (untoggled) {
                if (!lineMeta[2].toggled) {
                    this.reverseGitChange(lineMeta);
                }
            } else {
                if (lineMeta[2].toggled) {
                    this.applyGitChange(lineMeta);
                } else {
                    this.reverseGitChange(lineMeta);
                }
            }
            if (oi !== lineMeta[0]) {
                offset = oi - lineMeta[0];
                if (offset < 0) {
                    this.meta.moveLineMeta(lineMeta, offset);
                }
            }
        }
        cursors = [];
        for (l = 0, len3 = metas.length; l < len3; l++) {
            lineMeta = metas[l];
            cursors.push([0, lineMeta[0]]);
            if (indexOf.call(this.meta.metas, lineMeta) < 0) {
                this.meta.addLineMeta(lineMeta);
                this.meta.addDiv(lineMeta);
            }
        }
        this["do"].start();
        this["do"].setCursors(cursors, {
            main: 'closest'
        });
        this["do"].select([]);
        return this["do"].end();
    },
    reverseGitChange: function(lineMeta) {
        var i, len, li, line, meta, ref, ref1;
        meta = lineMeta[2];
        li = lineMeta[0];
        this["do"].start();
        meta.toggled = true;
        if ((ref = meta.div) != null) {
            ref.classList.add('toggled');
        }
        switch (meta.clss) {
            case 'git mod':
            case 'git mod boring':
                this["do"].change(li, meta.change.old);
                break;
            case 'git add':
            case 'git add boring':
                this["do"]["delete"](li);
                break;
            case 'git del':
                ref1 = reversed(meta.change);
                for (i = 0, len = ref1.length; i < len; i++) {
                    line = ref1[i];
                    this["do"].insert(li, line.old);
                }
        }
        return this["do"].end();
    },
    applyGitChange: function(lineMeta) {
        var i, len, li, line, meta, ref, ref1;
        meta = lineMeta[2];
        li = lineMeta[0];
        this["do"].start();
        delete meta.toggled;
        if ((ref = meta.div) != null) {
            ref.classList.remove('toggled');
        }
        switch (meta.clss) {
            case 'git mod':
            case 'git mod boring':
                this["do"].change(li, meta.change["new"]);
                break;
            case 'git add':
            case 'git add boring':
                this["do"].insert(li, meta.change["new"]);
                break;
            case 'git del':
                ref1 = reversed(meta.change);
                for (i = 0, len = ref1.length; i < len; i++) {
                    line = ref1[i];
                    this["do"]["delete"](li);
                }
        }
        return this["do"].end();
    }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../../coffee/editor/actions/togglegit.coffee